clang-tidy-9 -checks=* fileflowprocessor.cpp utils.cpp reader.cpp processeventprocessor.cpp sysflowcontext.cpp MurmurHash3.cpp networkflowprocessor.cpp sysflowprocessor.cpp containercontext.cpp dataflowprocessor.cpp filecontext.cpp sysflowwriter.cpp fileeventprocessor.cpp main.cpp processcontext.cpp -- -std=c++17 -Wall -ggdb -I.. -I../modules/sysflow/c++/ -DHAS_CAPTURE -DPLATFORM_NAME=\"Linux\" -DK8S_DISABLE_THREAD -I../modules/sysdig/build/include/ -I../modules/sysdig/build/include/curl/ -I../modules/sysdig/build/include/json/ -I../modules/sysdig/build/include/openssl/ -I../modules/sysdig/build/include/driver/ -I../modules/sysdig/build/include/userspace/libsinsp/ -I../modules/sysdig/build/include/userspace/libscap/ -I../modules/avro/lang/c++/build/ -I/usr/local/include/
/build/src/MurmurHash3.cpp:32:9: warning: macro 'FORCE_INLINE' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define FORCE_INLINE inline __attribute__((always_inline))
        ^
/build/src/MurmurHash3.cpp:34:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
inline uint32_t rotl32 ( uint32_t x, int8_t r )
       ~~~~~~~~ ^
       auto                                     -> uint32_t
/build/src/MurmurHash3.cpp:36:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return (x << r) | (x >> (32 - r));
          ^
/build/src/MurmurHash3.cpp:36:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return (x << r) | (x >> (32 - r));
                     ^
/build/src/MurmurHash3.cpp:36:28: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  return (x << r) | (x >> (32 - r));
                           ^
/build/src/MurmurHash3.cpp:39:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
inline uint64_t rotl64 ( uint64_t x, int8_t r )
       ~~~~~~~~ ^
       auto                                     -> uint64_t
/build/src/MurmurHash3.cpp:41:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return (x << r) | (x >> (64 - r));
          ^
/build/src/MurmurHash3.cpp:41:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return (x << r) | (x >> (64 - r));
                     ^
/build/src/MurmurHash3.cpp:41:28: warning: 64 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  return (x << r) | (x >> (64 - r));
                           ^
/build/src/MurmurHash3.cpp:44:9: warning: function-like macro 'ROTL32' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define ROTL32(x,y)     rotl32(x,y)
        ^
/build/src/MurmurHash3.cpp:45:9: warning: function-like macro 'ROTL64' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define ROTL64(x,y)     rotl64(x,y)
        ^
/build/src/MurmurHash3.cpp:47:9: warning: function-like macro 'BIG_CONSTANT' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define BIG_CONSTANT(x) (x##LLU)
        ^
/build/src/MurmurHash3.cpp:55:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
FORCE_INLINE uint32_t getblock32 ( const uint32_t * p, int i )
                      ^
/build/src/MurmurHash3.cpp:57:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  return p[i];
         ^
/build/src/MurmurHash3.cpp:60:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
FORCE_INLINE uint64_t getblock64 ( const uint64_t * p, int i )
                      ^
/build/src/MurmurHash3.cpp:62:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  return p[i];
         ^
/build/src/MurmurHash3.cpp:68:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
FORCE_INLINE uint32_t fmix32 ( uint32_t h )
                      ^
/build/src/MurmurHash3.cpp:70:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  h ^= h >> 16;
       ^
/build/src/MurmurHash3.cpp:70:13: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  h ^= h >> 16;
            ^
/build/src/MurmurHash3.cpp:71:8: warning: 0x85ebca6b is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  h *= 0x85ebca6b;
       ^
/build/src/MurmurHash3.cpp:72:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  h ^= h >> 13;
       ^
/build/src/MurmurHash3.cpp:72:13: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  h ^= h >> 13;
            ^
/build/src/MurmurHash3.cpp:73:8: warning: 0xc2b2ae35 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  h *= 0xc2b2ae35;
       ^
/build/src/MurmurHash3.cpp:74:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  h ^= h >> 16;
       ^
/build/src/MurmurHash3.cpp:74:13: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  h ^= h >> 16;
            ^
/build/src/MurmurHash3.cpp:81:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
FORCE_INLINE uint64_t fmix64 ( uint64_t k )
                      ^
/build/src/MurmurHash3.cpp:83:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  k ^= k >> 33;
       ^
/build/src/MurmurHash3.cpp:83:13: warning: 33 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  k ^= k >> 33;
            ^
/build/src/MurmurHash3.cpp:85:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  k ^= k >> 33;
       ^
/build/src/MurmurHash3.cpp:85:13: warning: 33 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  k ^= k >> 33;
            ^
/build/src/MurmurHash3.cpp:87:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  k ^= k >> 33;
       ^
/build/src/MurmurHash3.cpp:87:13: warning: 33 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  k ^= k >> 33;
            ^
/build/src/MurmurHash3.cpp:97:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const uint8_t * data = (const uint8_t*)key;
        ^~~~~~~
        auto
/build/src/MurmurHash3.cpp:97:26: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  const uint8_t * data = (const uint8_t*)key;
                         ^~~~~~~~~~~~~~~~
                         static_cast<const uint8_t*>( )
/build/src/MurmurHash3.cpp:97:26: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:108:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const uint32_t * blocks = (const uint32_t *)(data + nblocks*4);
        ^~~~~~~~
        auto
/build/src/MurmurHash3.cpp:108:29: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  const uint32_t * blocks = (const uint32_t *)(data + nblocks*4);
                            ^~~~~~~~~~~~~~~~~~
                            reinterpret_cast<const uint32_t *>
/build/src/MurmurHash3.cpp:108:29: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:108:53: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  const uint32_t * blocks = (const uint32_t *)(data + nblocks*4);
                                                    ^
/build/src/MurmurHash3.cpp:110:25: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  for(int i = -nblocks; i; i++)
                        ^
                          != 0
/build/src/MurmurHash3.cpp:120:13: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    h1 = h1*5+0xe6546b64;
            ^
/build/src/MurmurHash3.cpp:120:15: warning: 0xe6546b64 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    h1 = h1*5+0xe6546b64;
              ^
/build/src/MurmurHash3.cpp:126:9: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  const uint8_t * tail = (const uint8_t*)(data + nblocks*4);
        ^~~~~~~
        auto
/build/src/MurmurHash3.cpp:126:26: warning: redundant cast to the same type [google-readability-casting]
  const uint8_t * tail = (const uint8_t*)(data + nblocks*4);
                         ^~~~~~~~~~~~~~~~
/build/src/MurmurHash3.cpp:126:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  const uint8_t * tail = (const uint8_t*)(data + nblocks*4);
                                               ^
/build/src/MurmurHash3.cpp:130:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  switch(len & 3)
         ^
/build/src/MurmurHash3.cpp:132:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 3: k1 ^= tail[2] << 16;
          ^
/build/src/MurmurHash3.cpp:132:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 3: k1 ^= tail[2] << 16;
                ^
/build/src/MurmurHash3.cpp:132:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:132:28: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 3: k1 ^= tail[2] << 16;
                           ^
/build/src/MurmurHash3.cpp:133:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 2: k1 ^= tail[1] << 8;
          ^
/build/src/MurmurHash3.cpp:133:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 2: k1 ^= tail[1] << 8;
                ^
/build/src/MurmurHash3.cpp:133:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:133:28: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 2: k1 ^= tail[1] << 8;
                           ^
/build/src/MurmurHash3.cpp:134:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 1: k1 ^= tail[0];
                ^
/build/src/MurmurHash3.cpp:141:3: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  h1 ^= len;
  ^
/build/src/MurmurHash3.cpp:145:4: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  *(uint32_t*)out = h1;
   ^~~~~~~~~~~
   static_cast<uint32_t*>( )
/build/src/MurmurHash3.cpp:145:4: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:153:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const uint8_t * data = (const uint8_t*)key;
        ^~~~~~~
        auto
/build/src/MurmurHash3.cpp:153:26: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  const uint8_t * data = (const uint8_t*)key;
                         ^~~~~~~~~~~~~~~~
                         static_cast<const uint8_t*>( )
/build/src/MurmurHash3.cpp:153:26: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:169:9: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  const uint32_t * blocks = (const uint32_t *)(data + nblocks*16);
        ^~~~~~~~
        auto
/build/src/MurmurHash3.cpp:169:29: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  const uint32_t * blocks = (const uint32_t *)(data + nblocks*16);
                            ^~~~~~~~~~~~~~~~~~
                            reinterpret_cast<const uint32_t *>
/build/src/MurmurHash3.cpp:169:29: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:169:53: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  const uint32_t * blocks = (const uint32_t *)(data + nblocks*16);
                                                    ^
/build/src/MurmurHash3.cpp:169:63: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  const uint32_t * blocks = (const uint32_t *)(data + nblocks*16);
                                                              ^
/build/src/MurmurHash3.cpp:171:25: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  for(int i = -nblocks; i; i++)
                        ^
                          != 0
/build/src/MurmurHash3.cpp:180:43: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    h1 = ROTL32(h1,19); h1 += h2; h1 = h1*5+0x561ccd1b;
                                          ^
/build/src/MurmurHash3.cpp:180:45: warning: 0x561ccd1b is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    h1 = ROTL32(h1,19); h1 += h2; h1 = h1*5+0x561ccd1b;
                                            ^
/build/src/MurmurHash3.cpp:184:43: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    h2 = ROTL32(h2,17); h2 += h3; h2 = h2*5+0x0bcaa747;
                                          ^
/build/src/MurmurHash3.cpp:184:45: warning: 0x0bcaa747 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    h2 = ROTL32(h2,17); h2 += h3; h2 = h2*5+0x0bcaa747;
                                            ^
/build/src/MurmurHash3.cpp:188:43: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    h3 = ROTL32(h3,15); h3 += h4; h3 = h3*5+0x96cd1c35;
                                          ^
/build/src/MurmurHash3.cpp:188:45: warning: 0x96cd1c35 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    h3 = ROTL32(h3,15); h3 += h4; h3 = h3*5+0x96cd1c35;
                                            ^
/build/src/MurmurHash3.cpp:192:43: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    h4 = ROTL32(h4,13); h4 += h1; h4 = h4*5+0x32ac3b17;
                                          ^
/build/src/MurmurHash3.cpp:192:45: warning: 0x32ac3b17 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    h4 = ROTL32(h4,13); h4 += h1; h4 = h4*5+0x32ac3b17;
                                            ^
/build/src/MurmurHash3.cpp:198:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);
        ^~~~~~~
        auto
/build/src/MurmurHash3.cpp:198:26: warning: redundant cast to the same type [google-readability-casting]
  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);
                         ^~~~~~~~~~~~~~~~
/build/src/MurmurHash3.cpp:198:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);
                                               ^
/build/src/MurmurHash3.cpp:198:58: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);
                                                         ^
/build/src/MurmurHash3.cpp:205:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  switch(len & 15)
         ^
/build/src/MurmurHash3.cpp:205:16: warning: 15 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  switch(len & 15)
               ^
/build/src/MurmurHash3.cpp:207:8: warning: 15 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 15: k4 ^= tail[14] << 16;
       ^
/build/src/MurmurHash3.cpp:207:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 15: k4 ^= tail[14] << 16;
           ^
/build/src/MurmurHash3.cpp:207:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 15: k4 ^= tail[14] << 16;
                 ^
/build/src/MurmurHash3.cpp:207:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:207:23: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case 15: k4 ^= tail[14] << 16;
                      ^
/build/src/MurmurHash3.cpp:207:30: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 15: k4 ^= tail[14] << 16;
                             ^
/build/src/MurmurHash3.cpp:208:8: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case 14: k4 ^= tail[13] << 8;
       ^
/build/src/MurmurHash3.cpp:208:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 14: k4 ^= tail[13] << 8;
           ^
/build/src/MurmurHash3.cpp:208:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 14: k4 ^= tail[13] << 8;
                 ^
/build/src/MurmurHash3.cpp:208:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:208:23: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case 14: k4 ^= tail[13] << 8;
                      ^
/build/src/MurmurHash3.cpp:208:30: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case 14: k4 ^= tail[13] << 8;
                             ^
/build/src/MurmurHash3.cpp:209:8: warning: 13 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 13: k4 ^= tail[12] << 0;
       ^
/build/src/MurmurHash3.cpp:209:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 13: k4 ^= tail[12] << 0;
           ^
/build/src/MurmurHash3.cpp:209:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 13: k4 ^= tail[12] << 0;
                 ^
/build/src/MurmurHash3.cpp:209:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:209:23: warning: 12 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 13: k4 ^= tail[12] << 0;
                      ^
/build/src/MurmurHash3.cpp:212:8: warning: 12 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 12: k3 ^= tail[11] << 24;
       ^
/build/src/MurmurHash3.cpp:212:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 12: k3 ^= tail[11] << 24;
           ^
/build/src/MurmurHash3.cpp:212:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 12: k3 ^= tail[11] << 24;
                 ^
/build/src/MurmurHash3.cpp:212:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:212:23: warning: 11 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 12: k3 ^= tail[11] << 24;
                      ^
/build/src/MurmurHash3.cpp:212:30: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case 12: k3 ^= tail[11] << 24;
                             ^
/build/src/MurmurHash3.cpp:213:8: warning: 11 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 11: k3 ^= tail[10] << 16;
       ^
/build/src/MurmurHash3.cpp:213:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 11: k3 ^= tail[10] << 16;
           ^
/build/src/MurmurHash3.cpp:213:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 11: k3 ^= tail[10] << 16;
                 ^
/build/src/MurmurHash3.cpp:213:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:213:23: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 11: k3 ^= tail[10] << 16;
                      ^
/build/src/MurmurHash3.cpp:213:30: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 11: k3 ^= tail[10] << 16;
                             ^
/build/src/MurmurHash3.cpp:214:8: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case 10: k3 ^= tail[ 9] << 8;
       ^
/build/src/MurmurHash3.cpp:214:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 10: k3 ^= tail[ 9] << 8;
           ^
/build/src/MurmurHash3.cpp:214:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 10: k3 ^= tail[ 9] << 8;
                 ^
/build/src/MurmurHash3.cpp:214:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:214:24: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 10: k3 ^= tail[ 9] << 8;
                       ^
/build/src/MurmurHash3.cpp:214:30: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 10: k3 ^= tail[ 9] << 8;
                             ^
/build/src/MurmurHash3.cpp:215:9: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  9: k3 ^= tail[ 8] << 0;
        ^
/build/src/MurmurHash3.cpp:215:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  9: k3 ^= tail[ 8] << 0;
           ^
/build/src/MurmurHash3.cpp:215:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  9: k3 ^= tail[ 8] << 0;
                 ^
/build/src/MurmurHash3.cpp:215:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:215:24: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  9: k3 ^= tail[ 8] << 0;
                       ^
/build/src/MurmurHash3.cpp:218:9: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  8: k2 ^= tail[ 7] << 24;
        ^
/build/src/MurmurHash3.cpp:218:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  8: k2 ^= tail[ 7] << 24;
           ^
/build/src/MurmurHash3.cpp:218:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  8: k2 ^= tail[ 7] << 24;
                 ^
/build/src/MurmurHash3.cpp:218:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:218:24: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case  8: k2 ^= tail[ 7] << 24;
                       ^
/build/src/MurmurHash3.cpp:218:30: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case  8: k2 ^= tail[ 7] << 24;
                             ^
/build/src/MurmurHash3.cpp:219:9: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  7: k2 ^= tail[ 6] << 16;
        ^
/build/src/MurmurHash3.cpp:219:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  7: k2 ^= tail[ 6] << 16;
           ^
/build/src/MurmurHash3.cpp:219:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  7: k2 ^= tail[ 6] << 16;
                 ^
/build/src/MurmurHash3.cpp:219:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:219:24: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  7: k2 ^= tail[ 6] << 16;
                       ^
/build/src/MurmurHash3.cpp:219:30: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  7: k2 ^= tail[ 6] << 16;
                             ^
/build/src/MurmurHash3.cpp:220:9: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  6: k2 ^= tail[ 5] << 8;
        ^
/build/src/MurmurHash3.cpp:220:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  6: k2 ^= tail[ 5] << 8;
           ^
/build/src/MurmurHash3.cpp:220:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  6: k2 ^= tail[ 5] << 8;
                 ^
/build/src/MurmurHash3.cpp:220:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:220:24: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  6: k2 ^= tail[ 5] << 8;
                       ^
/build/src/MurmurHash3.cpp:220:30: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  6: k2 ^= tail[ 5] << 8;
                             ^
/build/src/MurmurHash3.cpp:221:9: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  5: k2 ^= tail[ 4] << 0;
        ^
/build/src/MurmurHash3.cpp:221:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  5: k2 ^= tail[ 4] << 0;
           ^
/build/src/MurmurHash3.cpp:221:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  5: k2 ^= tail[ 4] << 0;
                 ^
/build/src/MurmurHash3.cpp:221:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:224:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  4: k1 ^= tail[ 3] << 24;
           ^
/build/src/MurmurHash3.cpp:224:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  4: k1 ^= tail[ 3] << 24;
                 ^
/build/src/MurmurHash3.cpp:224:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:224:30: warning: 24 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  4: k1 ^= tail[ 3] << 24;
                             ^
/build/src/MurmurHash3.cpp:225:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  3: k1 ^= tail[ 2] << 16;
           ^
/build/src/MurmurHash3.cpp:225:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  3: k1 ^= tail[ 2] << 16;
                 ^
/build/src/MurmurHash3.cpp:225:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:225:30: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  3: k1 ^= tail[ 2] << 16;
                             ^
/build/src/MurmurHash3.cpp:226:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  2: k1 ^= tail[ 1] << 8;
           ^
/build/src/MurmurHash3.cpp:226:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  2: k1 ^= tail[ 1] << 8;
                 ^
/build/src/MurmurHash3.cpp:226:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:226:30: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  2: k1 ^= tail[ 1] << 8;
                             ^
/build/src/MurmurHash3.cpp:227:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  1: k1 ^= tail[ 0] << 0;
           ^
/build/src/MurmurHash3.cpp:227:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  1: k1 ^= tail[ 0] << 0;
                 ^
/build/src/MurmurHash3.cpp:227:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/MurmurHash3.cpp:234:3: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  h1 ^= len; h2 ^= len; h3 ^= len; h4 ^= len;
  ^
/build/src/MurmurHash3.cpp:234:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  h1 ^= len; h2 ^= len; h3 ^= len; h4 ^= len;
             ^
/build/src/MurmurHash3.cpp:234:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  h1 ^= len; h2 ^= len; h3 ^= len; h4 ^= len;
                        ^
/build/src/MurmurHash3.cpp:234:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  h1 ^= len; h2 ^= len; h3 ^= len; h4 ^= len;
                                   ^
/build/src/MurmurHash3.cpp:247:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ((uint32_t*)out)[0] = h1;
  ^
/build/src/MurmurHash3.cpp:247:4: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  ((uint32_t*)out)[0] = h1;
   ^~~~~~~~~~~
   static_cast<uint32_t*>( )
/build/src/MurmurHash3.cpp:247:4: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:248:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ((uint32_t*)out)[1] = h2;
  ^
/build/src/MurmurHash3.cpp:248:4: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  ((uint32_t*)out)[1] = h2;
   ^~~~~~~~~~~
   static_cast<uint32_t*>( )
/build/src/MurmurHash3.cpp:248:4: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:249:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ((uint32_t*)out)[2] = h3;
  ^
/build/src/MurmurHash3.cpp:249:4: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  ((uint32_t*)out)[2] = h3;
   ^~~~~~~~~~~
   static_cast<uint32_t*>( )
/build/src/MurmurHash3.cpp:249:4: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:250:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ((uint32_t*)out)[3] = h4;
  ^
/build/src/MurmurHash3.cpp:250:4: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  ((uint32_t*)out)[3] = h4;
   ^~~~~~~~~~~
   static_cast<uint32_t*>( )
/build/src/MurmurHash3.cpp:250:4: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:258:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const uint8_t * data = (const uint8_t*)key;
        ^~~~~~~
        auto
/build/src/MurmurHash3.cpp:258:26: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  const uint8_t * data = (const uint8_t*)key;
                         ^~~~~~~~~~~~~~~~
                         static_cast<const uint8_t*>( )
/build/src/MurmurHash3.cpp:258:26: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:270:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const uint64_t * blocks = (const uint64_t *)(data);
        ^~~~~~~~
        auto
/build/src/MurmurHash3.cpp:270:29: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  const uint64_t * blocks = (const uint64_t *)(data);
                            ^~~~~~~~~~~~~~~~~~
                            reinterpret_cast<const uint64_t *>
/build/src/MurmurHash3.cpp:270:29: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:279:43: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    h1 = ROTL64(h1,27); h1 += h2; h1 = h1*5+0x52dce729;
                                          ^
/build/src/MurmurHash3.cpp:279:45: warning: 0x52dce729 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    h1 = ROTL64(h1,27); h1 += h2; h1 = h1*5+0x52dce729;
                                            ^
/build/src/MurmurHash3.cpp:283:43: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    h2 = ROTL64(h2,31); h2 += h1; h2 = h2*5+0x38495ab5;
                                          ^
/build/src/MurmurHash3.cpp:283:45: warning: 0x38495ab5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    h2 = ROTL64(h2,31); h2 += h1; h2 = h2*5+0x38495ab5;
                                            ^
/build/src/MurmurHash3.cpp:289:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);
        ^~~~~~~
        auto
/build/src/MurmurHash3.cpp:289:26: warning: redundant cast to the same type [google-readability-casting]
  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);
                         ^~~~~~~~~~~~~~~~
/build/src/MurmurHash3.cpp:289:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);
                                               ^
/build/src/MurmurHash3.cpp:289:58: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);
                                                         ^
/build/src/MurmurHash3.cpp:294:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  switch(len & 15)
         ^
/build/src/MurmurHash3.cpp:294:16: warning: 15 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  switch(len & 15)
               ^
/build/src/MurmurHash3.cpp:296:8: warning: 15 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 15: k2 ^= ((uint64_t)tail[14]) << 48;
       ^
/build/src/MurmurHash3.cpp:296:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 15: k2 ^= ((uint64_t)tail[14]) << 48;
                 ^
/build/src/MurmurHash3.cpp:296:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case 15: k2 ^= ((uint64_t)tail[14]) << 48;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:296:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 15: k2 ^= ((uint64_t)tail[14]) << 48;
                            ^
/build/src/MurmurHash3.cpp:296:34: warning: 14 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 15: k2 ^= ((uint64_t)tail[14]) << 48;
                                 ^
/build/src/MurmurHash3.cpp:296:42: warning: 48 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 15: k2 ^= ((uint64_t)tail[14]) << 48;
                                         ^
/build/src/MurmurHash3.cpp:297:8: warning: 14 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 14: k2 ^= ((uint64_t)tail[13]) << 40;
       ^
/build/src/MurmurHash3.cpp:297:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 14: k2 ^= ((uint64_t)tail[13]) << 40;
                 ^
/build/src/MurmurHash3.cpp:297:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case 14: k2 ^= ((uint64_t)tail[13]) << 40;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:297:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 14: k2 ^= ((uint64_t)tail[13]) << 40;
                            ^
/build/src/MurmurHash3.cpp:297:34: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case 14: k2 ^= ((uint64_t)tail[13]) << 40;
                                 ^
/build/src/MurmurHash3.cpp:297:42: warning: 40 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 14: k2 ^= ((uint64_t)tail[13]) << 40;
                                         ^
/build/src/MurmurHash3.cpp:298:8: warning: 13 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 13: k2 ^= ((uint64_t)tail[12]) << 32;
       ^
/build/src/MurmurHash3.cpp:298:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 13: k2 ^= ((uint64_t)tail[12]) << 32;
                 ^
/build/src/MurmurHash3.cpp:298:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case 13: k2 ^= ((uint64_t)tail[12]) << 32;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:298:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 13: k2 ^= ((uint64_t)tail[12]) << 32;
                            ^
/build/src/MurmurHash3.cpp:298:34: warning: 12 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 13: k2 ^= ((uint64_t)tail[12]) << 32;
                                 ^
/build/src/MurmurHash3.cpp:298:42: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 13: k2 ^= ((uint64_t)tail[12]) << 32;
                                         ^
/build/src/MurmurHash3.cpp:299:8: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case 12: k2 ^= ((uint64_t)tail[11]) << 24;
       ^
/build/src/MurmurHash3.cpp:299:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 12: k2 ^= ((uint64_t)tail[11]) << 24;
                 ^
/build/src/MurmurHash3.cpp:299:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case 12: k2 ^= ((uint64_t)tail[11]) << 24;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:299:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 12: k2 ^= ((uint64_t)tail[11]) << 24;
                            ^
/build/src/MurmurHash3.cpp:299:34: warning: 11 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 12: k2 ^= ((uint64_t)tail[11]) << 24;
                                 ^
/build/src/MurmurHash3.cpp:299:42: warning: 24 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 12: k2 ^= ((uint64_t)tail[11]) << 24;
                                         ^
/build/src/MurmurHash3.cpp:300:8: warning: 11 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 11: k2 ^= ((uint64_t)tail[10]) << 16;
       ^
/build/src/MurmurHash3.cpp:300:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 11: k2 ^= ((uint64_t)tail[10]) << 16;
                 ^
/build/src/MurmurHash3.cpp:300:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case 11: k2 ^= ((uint64_t)tail[10]) << 16;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:300:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 11: k2 ^= ((uint64_t)tail[10]) << 16;
                            ^
/build/src/MurmurHash3.cpp:300:34: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 11: k2 ^= ((uint64_t)tail[10]) << 16;
                                 ^
/build/src/MurmurHash3.cpp:300:42: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case 11: k2 ^= ((uint64_t)tail[10]) << 16;
                                         ^
/build/src/MurmurHash3.cpp:301:8: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 10: k2 ^= ((uint64_t)tail[ 9]) << 8;
       ^
/build/src/MurmurHash3.cpp:301:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 10: k2 ^= ((uint64_t)tail[ 9]) << 8;
                 ^
/build/src/MurmurHash3.cpp:301:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case 10: k2 ^= ((uint64_t)tail[ 9]) << 8;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:301:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 10: k2 ^= ((uint64_t)tail[ 9]) << 8;
                            ^
/build/src/MurmurHash3.cpp:301:35: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case 10: k2 ^= ((uint64_t)tail[ 9]) << 8;
                                  ^
/build/src/MurmurHash3.cpp:301:42: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case 10: k2 ^= ((uint64_t)tail[ 9]) << 8;
                                         ^
/build/src/MurmurHash3.cpp:302:9: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  9: k2 ^= ((uint64_t)tail[ 8]) << 0;
        ^
/build/src/MurmurHash3.cpp:302:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  9: k2 ^= ((uint64_t)tail[ 8]) << 0;
                 ^
/build/src/MurmurHash3.cpp:302:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case  9: k2 ^= ((uint64_t)tail[ 8]) << 0;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:302:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  9: k2 ^= ((uint64_t)tail[ 8]) << 0;
                            ^
/build/src/MurmurHash3.cpp:302:35: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  9: k2 ^= ((uint64_t)tail[ 8]) << 0;
                                  ^
/build/src/MurmurHash3.cpp:305:9: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  8: k1 ^= ((uint64_t)tail[ 7]) << 56;
        ^
/build/src/MurmurHash3.cpp:305:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  8: k1 ^= ((uint64_t)tail[ 7]) << 56;
                 ^
/build/src/MurmurHash3.cpp:305:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case  8: k1 ^= ((uint64_t)tail[ 7]) << 56;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:305:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  8: k1 ^= ((uint64_t)tail[ 7]) << 56;
                            ^
/build/src/MurmurHash3.cpp:305:35: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case  8: k1 ^= ((uint64_t)tail[ 7]) << 56;
                                  ^
/build/src/MurmurHash3.cpp:305:42: warning: 56 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case  8: k1 ^= ((uint64_t)tail[ 7]) << 56;
                                         ^
/build/src/MurmurHash3.cpp:306:9: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case  7: k1 ^= ((uint64_t)tail[ 6]) << 48;
        ^
/build/src/MurmurHash3.cpp:306:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  7: k1 ^= ((uint64_t)tail[ 6]) << 48;
                 ^
/build/src/MurmurHash3.cpp:306:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case  7: k1 ^= ((uint64_t)tail[ 6]) << 48;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:306:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  7: k1 ^= ((uint64_t)tail[ 6]) << 48;
                            ^
/build/src/MurmurHash3.cpp:306:35: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  7: k1 ^= ((uint64_t)tail[ 6]) << 48;
                                  ^
/build/src/MurmurHash3.cpp:306:42: warning: 48 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  7: k1 ^= ((uint64_t)tail[ 6]) << 48;
                                         ^
/build/src/MurmurHash3.cpp:307:9: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  6: k1 ^= ((uint64_t)tail[ 5]) << 40;
        ^
/build/src/MurmurHash3.cpp:307:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  6: k1 ^= ((uint64_t)tail[ 5]) << 40;
                 ^
/build/src/MurmurHash3.cpp:307:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case  6: k1 ^= ((uint64_t)tail[ 5]) << 40;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:307:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  6: k1 ^= ((uint64_t)tail[ 5]) << 40;
                            ^
/build/src/MurmurHash3.cpp:307:35: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case  6: k1 ^= ((uint64_t)tail[ 5]) << 40;
                                  ^
/build/src/MurmurHash3.cpp:307:42: warning: 40 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  6: k1 ^= ((uint64_t)tail[ 5]) << 40;
                                         ^
/build/src/MurmurHash3.cpp:308:9: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  5: k1 ^= ((uint64_t)tail[ 4]) << 32;
        ^
/build/src/MurmurHash3.cpp:308:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  5: k1 ^= ((uint64_t)tail[ 4]) << 32;
                 ^
/build/src/MurmurHash3.cpp:308:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case  5: k1 ^= ((uint64_t)tail[ 4]) << 32;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:308:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  5: k1 ^= ((uint64_t)tail[ 4]) << 32;
                            ^
/build/src/MurmurHash3.cpp:308:42: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  5: k1 ^= ((uint64_t)tail[ 4]) << 32;
                                         ^
/build/src/MurmurHash3.cpp:309:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  4: k1 ^= ((uint64_t)tail[ 3]) << 24;
                 ^
/build/src/MurmurHash3.cpp:309:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case  4: k1 ^= ((uint64_t)tail[ 3]) << 24;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:309:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  4: k1 ^= ((uint64_t)tail[ 3]) << 24;
                            ^
/build/src/MurmurHash3.cpp:309:42: warning: 24 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  4: k1 ^= ((uint64_t)tail[ 3]) << 24;
                                         ^
/build/src/MurmurHash3.cpp:310:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  3: k1 ^= ((uint64_t)tail[ 2]) << 16;
                 ^
/build/src/MurmurHash3.cpp:310:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case  3: k1 ^= ((uint64_t)tail[ 2]) << 16;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:310:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  3: k1 ^= ((uint64_t)tail[ 2]) << 16;
                            ^
/build/src/MurmurHash3.cpp:310:42: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  case  3: k1 ^= ((uint64_t)tail[ 2]) << 16;
                                         ^
/build/src/MurmurHash3.cpp:311:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  2: k1 ^= ((uint64_t)tail[ 1]) << 8;
                 ^
/build/src/MurmurHash3.cpp:311:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case  2: k1 ^= ((uint64_t)tail[ 1]) << 8;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:311:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  2: k1 ^= ((uint64_t)tail[ 1]) << 8;
                            ^
/build/src/MurmurHash3.cpp:311:42: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  case  2: k1 ^= ((uint64_t)tail[ 1]) << 8;
                                         ^
/build/src/MurmurHash3.cpp:312:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case  1: k1 ^= ((uint64_t)tail[ 0]) << 0;
                 ^
/build/src/MurmurHash3.cpp:312:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case  1: k1 ^= ((uint64_t)tail[ 0]) << 0;
                  ^~~~~~~~~~
                  static_cast<uint64_t>( )
/build/src/MurmurHash3.cpp:312:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case  1: k1 ^= ((uint64_t)tail[ 0]) << 0;
                            ^
/build/src/MurmurHash3.cpp:319:3: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  h1 ^= len; h2 ^= len;
  ^
/build/src/MurmurHash3.cpp:319:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  h1 ^= len; h2 ^= len;
             ^
/build/src/MurmurHash3.cpp:330:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ((uint64_t*)out)[0] = h1;
  ^
/build/src/MurmurHash3.cpp:330:4: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  ((uint64_t*)out)[0] = h1;
   ^~~~~~~~~~~
   static_cast<uint64_t*>( )
/build/src/MurmurHash3.cpp:330:4: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/MurmurHash3.cpp:331:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ((uint64_t*)out)[1] = h2;
  ^
/build/src/MurmurHash3.cpp:331:4: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  ((uint64_t*)out)[1] = h2;
   ^~~~~~~~~~~
   static_cast<uint64_t*>( )
/build/src/MurmurHash3.cpp:331:4: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/containercontext.cpp:21:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace container;
^
/build/src/containercontext.cpp:23:82: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
ContainerContext::ContainerContext(SysFlowContext* cxt, SysFlowWriter* writer) : m_containers(CONT_TABLE_SIZE) {
                                                                                 ^
/usr/include/sparsehash/dense_hash_map:186:27: note: default parameter was declared here
                          const hasher& hf = hasher(),
                          ^
/build/src/containercontext.cpp:26:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    m_containers.set_empty_key("0");
                               ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/containercontext.cpp:27:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    m_containers.set_deleted_key("");
                                 ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/containercontext.cpp:34:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
ContainerObj*  ContainerContext::createContainer(sinsp_evt* ev) {
~~~~~~~~~~~~~                    ^
auto                                                            -> ContainerObj*
/build/src/containercontext.cpp:35:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/containercontext.cpp:38:16: warning: use nullptr [modernize-use-nullptr]
        return NULL;
               ^~~~
               nullptr
/build/src/containercontext.cpp:42:21: warning: use nullptr [modernize-use-nullptr]
    if(container == NULL) {
                    ^~~~
                    nullptr
/build/src/containercontext.cpp:43:15: warning: use nullptr [modernize-use-nullptr]
       return NULL;
              ^~~~
              nullptr
/build/src/containercontext.cpp:45:5: warning: initializing non-owner 'ContainerObj *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
    ContainerObj* cont = new ContainerObj();
    ^
/build/src/containercontext.cpp:45:5: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto]
    ContainerObj* cont = new ContainerObj();
    ^~~~~~~~~~~~
    auto
/build/src/containercontext.cpp:50:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    cont->cont.type = (ContainerType)container->m_type;
                      ^~~~~~~~~~~~~~~
                      static_cast<ContainerType>(     )
/build/src/containercontext.cpp:56:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
ContainerObj* ContainerContext::getContainer(string id) {
~~~~~~~~~~~~~                   ^
auto                                                    -> ContainerObj*
/build/src/containercontext.cpp:56:53: warning: the parameter 'id' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
ContainerObj* ContainerContext::getContainer(string id) {
                                                    ^
                                             const &
/build/src/containercontext.cpp:61:12: warning: use nullptr [modernize-use-nullptr]
    return NULL;
           ^~~~
           nullptr
/build/src/containercontext.cpp:64:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
bool ContainerContext::exportContainer(string id) {
~~~~                   ^
auto                                              -> bool
/build/src/containercontext.cpp:64:47: warning: the parameter 'id' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
bool ContainerContext::exportContainer(string id) {
                                              ^
                                       const &
/build/src/containercontext.cpp:77:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int ContainerContext::derefContainer(string id) {
~~~                   ^
auto                                            -> int
/build/src/containercontext.cpp:77:45: warning: the parameter 'id' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
int ContainerContext::derefContainer(string id) {
                                            ^
                                     const &
/build/src/containercontext.cpp:88:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
ContainerObj* ContainerContext::getContainer(sinsp_evt* ev) {
~~~~~~~~~~~~~                   ^
auto                                                        -> ContainerObj*
/build/src/containercontext.cpp:89:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/containercontext.cpp:92:16: warning: use nullptr [modernize-use-nullptr]
        return NULL;
               ^~~~
               nullptr
/build/src/containercontext.cpp:94:24: warning: use nullptr [modernize-use-nullptr]
    ContainerObj* ct = NULL;
                       ^~~~
                       nullptr
/build/src/containercontext.cpp:102:14: warning: use nullptr [modernize-use-nullptr]
    if(ct == NULL) {
             ^~~~
             nullptr
/build/src/containercontext.cpp:115:12: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
           delete it->second;
           ^
/usr/include/sparsehash/internal/densehashtable.h:177:3: note: variable declared here
  pointer operator->() const { return &(operator*()); }
  ^
/build/src/containercontext.cpp:123:4: warning: use range-based for loop instead [modernize-loop-convert]
   for(ContainerTable::iterator it = m_containers.begin(); it != m_containers.end(); ++it) {
   ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (auto & m_container : m_containers)
/build/src/containercontext.cpp:124:9: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
        delete it->second;
        ^
/usr/include/sparsehash/internal/densehashtable.h:177:3: note: variable declared here
  pointer operator->() const { return &(operator*()); }
  ^
/build/src/dataflowprocessor.cpp:22:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace dataflow;
^
/build/src/dataflowprocessor.cpp:24:1: warning: initialization of 'm_logger' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
CREATE_LOGGER(DataFlowProcessor, "sysflow.dataflow");
^
/build/src/logger.h:33:63: note: expanded from macro 'CREATE_LOGGER'
#define CREATE_LOGGER(ClassName, logger) LoggerPtr ClassName::m_logger(Logger::getLogger(logger));
                                                              ^
/usr/include/log4cxx/logger.h:685:26: note: possibly throwing function declared here
        static LoggerPtr getLogger(const char* const name);
                         ^
/build/src/dataflowprocessor.cpp:26:149: warning: initializer for member 'm_dfSet' is redundant [readability-redundant-member-init]
DataFlowProcessor::DataFlowProcessor(SysFlowContext* cxt, SysFlowWriter* writer, process::ProcessContext* processCxt, file::FileContext* fileCxt) : m_dfSet() {
                                                                                                                                                    ^~~~~~~~~~
/build/src/dataflowprocessor.cpp:28:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'networkflow::NetworkFlowProcessor *' [cppcoreguidelines-owning-memory]
    m_netflowPrcr = new networkflow::NetworkFlowProcessor(cxt, writer, processCxt, &m_dfSet);
    ^
/build/src/dataflowprocessor.cpp:29:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'fileflow::FileFlowProcessor *' [cppcoreguidelines-owning-memory]
    m_fileflowPrcr = new fileflow::FileFlowProcessor(cxt, writer, processCxt, &m_dfSet, fileCxt);
    ^
/build/src/dataflowprocessor.cpp:30:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'fileevent::FileEventProcessor *' [cppcoreguidelines-owning-memory]
    m_fileevtPrcr = new fileevent::FileEventProcessor(writer, processCxt, fileCxt);
    ^
/build/src/dataflowprocessor.cpp:36:5: warning: 'if' statement is unnecessary; deleting null pointer has no effect [readability-delete-null-pointer]
    if(m_netflowPrcr != NULL) {
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/build/src/dataflowprocessor.cpp:36:25: warning: use nullptr [modernize-use-nullptr]
    if(m_netflowPrcr != NULL) {
                        ^
note: this fix will not be applied because it overlaps with another fix
/build/src/dataflowprocessor.cpp:39:5: warning: 'if' statement is unnecessary; deleting null pointer has no effect [readability-delete-null-pointer]
    if(m_fileflowPrcr != NULL) {
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/build/src/dataflowprocessor.cpp:39:26: warning: use nullptr [modernize-use-nullptr]
    if(m_fileflowPrcr != NULL) {
                         ^
note: this fix will not be applied because it overlaps with another fix
/build/src/dataflowprocessor.cpp:42:5: warning: 'if' statement is unnecessary; deleting null pointer has no effect [readability-delete-null-pointer]
    if(m_fileevtPrcr != NULL) {
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/build/src/dataflowprocessor.cpp:42:25: warning: use nullptr [modernize-use-nullptr]
    if(m_fileevtPrcr != NULL) {
                        ^
note: this fix will not be applied because it overlaps with another fix
/build/src/dataflowprocessor.cpp:48:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int DataFlowProcessor::handleDataEvent(sinsp_evt* ev, OpFlags flag) {
~~~                    ^
auto                                                                -> int
/build/src/dataflowprocessor.cpp:54:18: warning: use nullptr [modernize-use-nullptr]
    if(fdinfo == NULL) {
                 ^~~~
                 nullptr
/build/src/dataflowprocessor.cpp:55:8: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       SF_DEBUG(m_logger, "Event: " << ev->get_name() << " doesn't have an fdinfo associated with it! ErrorCode: " << utils::getSyscallResult(ev));
       ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/dataflowprocessor.cpp:58:9: warning: do not use 'else' after 'return' [readability-else-after-return]
       }else if(flag == OP_MMAP) {
        ^~~~~
/build/src/dataflowprocessor.cpp:79:21: warning: use nullptr [modernize-use-nullptr]
       if(fdinfo == NULL) {
                    ^~~~
                    nullptr
/build/src/dataflowprocessor.cpp:80:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
           SF_DEBUG(m_logger, " Returning 1" );
           ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/dataflowprocessor.cpp:86:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if(IS_FILE_EVT(flag)) {
      ^~~~~
/build/src/dataflowprocessor.cpp:94:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int DataFlowProcessor::removeAndWriteDFFromProc(ProcessObj* proc, int64_t tid) {
~~~                    ^
auto                                                                           -> int
/build/src/dataflowprocessor.cpp:100:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int DataFlowProcessor::checkForExpiredRecords() {
~~~                    ^
auto                                            -> int
/build/src/dataflowprocessor.cpp:111:6: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
     SF_DEBUG(m_logger, "Checking expired Flows!!!....");
     ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/dataflowprocessor.cpp:112:10: warning: use auto when declaring iterators [hicpp-use-auto]
     for(DataFlowSet::iterator it = m_dfSet.begin(); it != m_dfSet.end(); ) {
         ^~~~~~~~~~~~~~~~~~~~~
         auto
/build/src/dataflowprocessor.cpp:113:14: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
             SF_DEBUG(m_logger, "Checking flow with exportTime: " << (*it)->exportTime << " Now: " << now );
             ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/dataflowprocessor.cpp:115:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                 SF_DEBUG(m_logger, "Exporting flow!!! " );  
                 ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/filecontext.cpp:21:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace file;
^
/build/src/filecontext.cpp:23:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
FileContext::FileContext(container::ContainerContext* containerCxt, SysFlowWriter* writer) {
             ^
/usr/include/sparsehash/dense_hash_map:185:27: note: default parameter was declared here
  explicit dense_hash_map(size_type expected_max_items_in_table = 0,
                          ^
/build/src/filecontext.cpp:26:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    m_files.set_empty_key("-1");
                          ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/filecontext.cpp:27:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    m_files.set_deleted_key("-2");
                            ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/filecontext.cpp:35:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
FileObj* FileContext::createFile(sinsp_evt* ev, string path, char typechar, SFObjectState state, string key) {
~~~~~~~~              ^
auto                                                                                                         -> FileObj*
/build/src/filecontext.cpp:36:5: warning: initializing non-owner 'FileObj *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
    FileObj* f = new FileObj();
    ^
/build/src/filecontext.cpp:36:5: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto]
    FileObj* f = new FileObj();
    ^~~~~~~
    auto
/build/src/filecontext.cpp:37:14: warning: parameter 'key' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
    f->key = key; 
             ^
             std::move( )
/build/src/filecontext.cpp:41:20: warning: parameter 'path' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
    f->file.path = path;
                   ^
                   std::move( )
/build/src/filecontext.cpp:44:16: warning: use nullptr [modernize-use-nullptr]
    if(cont != NULL) {
               ^~~~
               nullptr
/build/src/filecontext.cpp:51:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
FileObj* FileContext::getFile(sinsp_evt* ev, SFObjectState state, bool& created) {
~~~~~~~~              ^
auto                                                                             -> FileObj*
/build/src/filecontext.cpp:55:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
FileObj* FileContext::getFile(sinsp_evt* ev, string path, char typechar, SFObjectState state, bool& created) {
~~~~~~~~              ^
auto                                                                                                         -> FileObj*
/build/src/filecontext.cpp:55:53: warning: the parameter 'path' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
FileObj* FileContext::getFile(sinsp_evt* ev, string path, char typechar, SFObjectState state, bool& created) {
                                                    ^
                                             const &
/build/src/filecontext.cpp:56:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/filecontext.cpp:61:21: warning: use nullptr [modernize-use-nullptr]
    FileObj* file = NULL;
                    ^~~~
                    nullptr
/build/src/filecontext.cpp:70:16: warning: use nullptr [modernize-use-nullptr]
    if(file == NULL) {
               ^~~~
               nullptr
/build/src/filecontext.cpp:79:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
FileObj* FileContext::getFile(string key) {
~~~~~~~~              ^
auto                                      -> FileObj*
/build/src/filecontext.cpp:79:38: warning: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
FileObj* FileContext::getFile(string key) {
                                     ^
                              const &
/build/src/filecontext.cpp:89:12: warning: use nullptr [modernize-use-nullptr]
    return NULL;
           ^~~~
           nullptr
/build/src/filecontext.cpp:92:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
bool FileContext::exportFile(string key) {
~~~~              ^
auto                                     -> bool
/build/src/filecontext.cpp:92:37: warning: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
bool FileContext::exportFile(string key) {
                                    ^
                             const &
/build/src/filecontext.cpp:115:15: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
              delete file;
              ^
/build/src/filecontext.cpp:113:15: note: variable declared here
              FileObj* file = it->second;
              ^
/build/src/filecontext.cpp:123:4: warning: use range-based for loop instead [modernize-loop-convert]
   for(FileTable::iterator it = m_files.begin(); it != m_files.end(); ++it) {
   ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (auto & m_file : m_files)
/build/src/filecontext.cpp:124:8: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
       delete it->second;
       ^
/usr/include/sparsehash/internal/densehashtable.h:177:3: note: variable declared here
  pointer operator->() const { return &(operator*()); }
  ^
/build/src/fileeventprocessor.cpp:21:10: warning: inclusion of deprecated C++ header 'assert.h'; consider using 'cassert' instead [modernize-deprecated-headers]
#include <assert.h>
         ^~~~~~~~~~
         <cassert>
/build/src/fileeventprocessor.cpp:23:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace fileevent;
^
/build/src/fileeventprocessor.cpp:25:1: warning: initialization of 'm_logger' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
CREATE_LOGGER(FileEventProcessor, "sysflow.fileevent");
^
/build/src/logger.h:33:63: note: expanded from macro 'CREATE_LOGGER'
#define CREATE_LOGGER(ClassName, logger) LoggerPtr ClassName::m_logger(Logger::getLogger(logger));
                                                              ^
/usr/include/log4cxx/logger.h:685:26: note: possibly throwing function declared here
        static LoggerPtr getLogger(const char* const name);
                         ^
/build/src/fileeventprocessor.cpp:33:21: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default]
FileEventProcessor::~FileEventProcessor() {
                    ^                     ~
                                          = default;
/build/src/fileeventprocessor.cpp:37:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int FileEventProcessor::handleFileFlowEvent(sinsp_evt* ev, OpFlags flag) {
~~~                     ^
auto                                                                     -> int
/build/src/fileeventprocessor.cpp:49:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int FileEventProcessor::writeLinkEvent(sinsp_evt* ev, OpFlags flag) {
~~~                     ^
auto                                                                -> int
/build/src/fileeventprocessor.cpp:50:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/fileeventprocessor.cpp:55:22: warning: use nullptr [modernize-use-nullptr]
    FileObj* file1 = NULL;
                     ^~~~
                     nullptr
/build/src/fileeventprocessor.cpp:56:22: warning: use nullptr [modernize-use-nullptr]
    FileObj* file2 = NULL;
                     ^~~~
                     nullptr
/build/src/fileeventprocessor.cpp:63:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
            path1 =  utils::getPath(ev, "oldpath");
                                        ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/fileeventprocessor.cpp:64:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
            path2 =  utils::getPath(ev, "newpath");
                                        ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/fileeventprocessor.cpp:69:49: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                    olddirfd = utils::getFD(ev, "olddirfd");
                                                ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/fileeventprocessor.cpp:70:49: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                    newdirfd = utils::getFD(ev, "newdirfd");
                                                ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/fileeventprocessor.cpp:72:49: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                    olddirfd = utils::getFD(ev, "olddir");
                                                ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/fileeventprocessor.cpp:73:49: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                    newdirfd = utils::getFD(ev, "newdir");
                                                ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/fileeventprocessor.cpp:83:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
            path1 =  utils::getPath(ev, "target");
                                        ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/fileeventprocessor.cpp:84:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
            path2 =  utils::getPath(ev, "linkpath");
                                        ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/fileeventprocessor.cpp:86:55: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                uint64_t linkdirfd = utils::getFD(ev, "linkdirfd");
                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/fileeventprocessor.cpp:93:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        SF_DEBUG(m_logger,"Path parameters for ev: " << ev->get_name() << " are " <<  path1 << " Path2: " << path2);
        ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileeventprocessor.cpp:118:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    SF_DEBUG(m_logger, "The Current working Directory of the " <<  ev->get_name() << " event is " << ti->get_cwd());
    ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileeventprocessor.cpp:123:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int FileEventProcessor::writeFileEvent(sinsp_evt* ev, OpFlags flag) {
~~~                     ^
auto                                                                -> int
/build/src/fileeventprocessor.cpp:124:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/fileeventprocessor.cpp:129:21: warning: use nullptr [modernize-use-nullptr]
    FileObj* file = NULL;
                    ^~~~
                    nullptr
/build/src/fileeventprocessor.cpp:130:18: warning: use nullptr [modernize-use-nullptr]
    if(fdinfo != NULL) {
                 ^~~~
                 nullptr
/build/src/fileeventprocessor.cpp:133:78: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        string fileName = (IS_UNLINKAT(ev->get_type())) ? utils::getPath(ev, "name") : utils::getPath(ev, "path");
                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/fileeventprocessor.cpp:133:107: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        string fileName = (IS_UNLINKAT(ev->get_type())) ? utils::getPath(ev, "name") : utils::getPath(ev, "path");
                                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/fileeventprocessor.cpp:137:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            assert(pinfo->m_len == sizeof(int64_t));
            ^
/usr/include/assert.h:91:48: note: expanded from macro 'assert'
   : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                               ^
/usr/include/assert.h:106:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __PRETTY_FUNCTION__
                                ^
/build/src/fileeventprocessor.cpp:138:30: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
            int64_t dirfd = *(int64_t *)pinfo->m_val;
                             ^~~~~~~~~~~
                             reinterpret_cast<int64_t *>( )
/build/src/fileeventprocessor.cpp:138:30: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/fileeventprocessor.cpp:164:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    SF_DEBUG(m_logger, "The Current working Directory of the " <<  ev->get_name() << " event is " << ti->get_cwd());
    ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:22:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace fileflow;
^
/build/src/fileflowprocessor.cpp:24:1: warning: initialization of 'm_logger' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
CREATE_LOGGER(FileFlowProcessor, "sysflow.fileflow");
^
/build/src/logger.h:33:63: note: expanded from macro 'CREATE_LOGGER'
#define CREATE_LOGGER(ClassName, logger) LoggerPtr ClassName::m_logger(Logger::getLogger(logger));
                                                              ^
/usr/include/log4cxx/logger.h:685:26: note: possibly throwing function declared here
        static LoggerPtr getLogger(const char* const name);
                         ^
/build/src/fileflowprocessor.cpp:34:20: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default]
FileFlowProcessor::~FileFlowProcessor() {
                   ^                    ~
                                        = default;
/build/src/fileflowprocessor.cpp:37:32: warning: method 'populateFileFlow' can be made static [readability-convert-member-functions-to-static]
inline void FileFlowProcessor::populateFileFlow(/*sinsp_fdinfo_t * fdinfo,*/ FileFlowObj* ff, OpFlags flag, sinsp_evt* ev, ProcessObj* proc, FileObj* file, string flowkey) {
                               ^
/build/src/fileflowprocessor.cpp:38:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   sinsp_threadinfo* ti = ev->get_thread_info();
                          ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/fileflowprocessor.cpp:53:18: warning: parameter 'flowkey' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
   ff->flowkey = flowkey;
                 ^
                 std::move( )
/build/src/fileflowprocessor.cpp:64:7: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
                        && ffi->second->filekey.compare(ffo->filekey) == 0) {
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
                           ffi->second->filekey                          ffo->filekey
/build/src/fileflowprocessor.cpp:65:6: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
                if(ffi->second->fileflow.opFlags & OP_OPEN) {
                   ^
                   (                                      ) != 0
/build/src/fileflowprocessor.cpp:65:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/fileflowprocessor.cpp:70:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
             SF_DEBUG(m_logger, "Removing related file flow on thread: " << ffi->second->fileflow.tid);         
             ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:74:5: warning: use range-based for loop instead [modernize-loop-convert]
    for(vector<FileFlowObj*>::iterator it = ffobjs.begin(); it != ffobjs.end(); it++) {
    ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       (auto & ffobj : ffobjs)
/build/src/fileflowprocessor.cpp:74:9: warning: use auto when declaring iterators [hicpp-use-auto]
    for(vector<FileFlowObj*>::iterator it = ffobjs.begin(); it != ffobjs.end(); it++) {
        ^
note: this fix will not be applied because it overlaps with another fix
/build/src/fileflowprocessor.cpp:76:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        (*it)->fileflow.opFlags |= OP_TRUNCATE;     
        ^
/build/src/fileflowprocessor.cpp:84:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
       ff->fileflow.opFlags |= flag;
       ^
/build/src/fileflowprocessor.cpp:104:146: warning: the parameter 'flowkey' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
inline void FileFlowProcessor::processNewFlow(sinsp_evt* ev, /*sinsp_fdinfo_t * fdinfo,*/  ProcessObj* proc, FileObj* file, OpFlags flag, string flowkey) {
                                                                                                                                                 ^
                                                                                                                                          const &
/build/src/fileflowprocessor.cpp:105:5: warning: initializing non-owner 'FileFlowObj *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
    FileFlowObj* ff = new FileFlowObj();
    ^
/build/src/fileflowprocessor.cpp:105:5: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto]
    FileFlowObj* ff = new FileFlowObj();
    ^~~~~~~~~~~
    auto
/build/src/fileflowprocessor.cpp:119:9: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
        delete ff;
        ^
/build/src/fileflowprocessor.cpp:105:5: note: variable declared here
    FileFlowObj* ff = new FileFlowObj();
    ^
/build/src/fileflowprocessor.cpp:128:36: warning: parameter 'flowkey' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
    removeFileFlow(proc, file, ff, flowkey);
                                   ^
                                   std::move( )
/build/src/fileflowprocessor.cpp:137:51: warning: parameter 'flowkey' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
          removeAndWriteFileFlow(proc, file, &ff, flowkey);
                                                  ^
                                                  std::move( )
/build/src/fileflowprocessor.cpp:141:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int FileFlowProcessor::handleFileFlowEvent(sinsp_evt* ev, OpFlags flag) {
~~~                    ^
auto                                                                    -> int
/build/src/fileflowprocessor.cpp:145:18: warning: use nullptr [modernize-use-nullptr]
    if(fdinfo == NULL) {
                 ^~~~
                 nullptr
/build/src/fileflowprocessor.cpp:171:8: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       SF_DEBUG(m_logger, "Event: " << ev->get_name() << " doesn't have an fdinfo associated with it! ");
       ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:177:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        SF_WARN(m_logger, "handleFileFlowEvent cannot handle ip sockets,  Ignoring..") ;
        ^
/build/src/logger.h:72:35: note: expanded from macro 'SF_WARN'
#define SF_WARN(logger, message)  LOG4CXX_WARN(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1816:86: note: expanded from macro 'LOG4CXX_WARN'
           logger->forcedLog(::log4cxx::Level::getWarn(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                     ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:195:23: warning: use nullptr [modernize-use-nullptr]
    FileFlowObj* ff = NULL;
                      ^~~~
                      nullptr
/build/src/fileflowprocessor.cpp:196:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/fileflowprocessor.cpp:210:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    SF_DEBUG(m_logger, proc->proc.exe << " Name: " <<  fdinfo->m_name << " type: " << fdinfo->get_typechar() <<  " " << file->file.path << " " <<  ev->get_name()); 
    ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:212:14: warning: use nullptr [modernize-use-nullptr]
    if(ff == NULL) {
             ^~~~
             nullptr
/build/src/fileflowprocessor.cpp:220:25: warning: method 'removeFileFlow' can be made static [readability-convert-member-functions-to-static]
void FileFlowProcessor::removeFileFlow(ProcessObj* proc, FileObj* file,  FileFlowObj** ff, string flowkey) {
                        ^
/build/src/fileflowprocessor.cpp:220:99: warning: the parameter 'flowkey' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
void FileFlowProcessor::removeFileFlow(ProcessObj* proc, FileObj* file,  FileFlowObj** ff, string flowkey) {
                                                                                                  ^
                                                                                           const &
/build/src/fileflowprocessor.cpp:222:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete *ff;
    ^
/build/src/fileflowprocessor.cpp:220:74: note: variable declared here
void FileFlowProcessor::removeFileFlow(ProcessObj* proc, FileObj* file,  FileFlowObj** ff, string flowkey) {
                                                                         ^
/build/src/fileflowprocessor.cpp:223:10: warning: use nullptr [modernize-use-nullptr]
    ff = NULL;
         ^~~~
         nullptr
/build/src/fileflowprocessor.cpp:224:16: warning: use nullptr [modernize-use-nullptr]
    if(file != NULL) {
               ^~~~
               nullptr
/build/src/fileflowprocessor.cpp:229:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int FileFlowProcessor::removeAndWriteFFFromProc(ProcessObj* proc, int64_t tid) {
~~~                    ^
auto                                                                           -> int
/build/src/fileflowprocessor.cpp:230:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    SF_DEBUG(m_logger, "CALLING removeAndWriteFFFromProc");
    ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:239:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            ffi->second->fileflow.opFlags |= OP_TRUNCATE;
            ^
/build/src/fileflowprocessor.cpp:240:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
            SF_DEBUG(m_logger, "Writing FILEFLOW!!");
            ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:244:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
            SF_DEBUG(m_logger, "Set size: " << m_dfSet->size());
            ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:246:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
            SF_DEBUG(m_logger, "After Set size: " << m_dfSet->size());
            ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:247:24: warning: use nullptr [modernize-use-nullptr]
            if(file == NULL) {
                       ^~~~
                       nullptr
/build/src/fileflowprocessor.cpp:248:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
                SF_ERROR(m_logger, "File object doesn't exist for fileflow: " << ffi->second->filekey << ". This shouldn't happen.");
                ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:261:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int FileFlowProcessor::removeFileFlowFromSet(FileFlowObj** ffo, bool deleteFileFlow) {
~~~                    ^
auto                                                                                 -> int
/build/src/fileflowprocessor.cpp:264:13: warning: use auto when declaring iterators [hicpp-use-auto]
        for(DataFlowSet::iterator iter = m_dfSet->find(*ffo); iter != m_dfSet->end(); iter++) {
            ^~~~~~~~~~~~~~~~~~~~~
            auto
/build/src/fileflowprocessor.cpp:266:17: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
                FileFlowObj* foundObj = static_cast<FileFlowObj*>(*iter);
                ^~~~~~~~~~~
                auto
/build/src/fileflowprocessor.cpp:266:41: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]
                FileFlowObj* foundObj = static_cast<FileFlowObj*>(*iter);
                                        ^
/build/src/fileflowprocessor.cpp:269:22: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
                     SF_DEBUG(m_logger, "Removing fileflow element from multiset"); 
                     ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:272:25: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
                        delete *ffo;
                        ^
/build/src/fileflowprocessor.cpp:261:46: note: variable declared here
int FileFlowProcessor::removeFileFlowFromSet(FileFlowObj** ffo, bool deleteFileFlow) {
                                             ^
/build/src/fileflowprocessor.cpp:273:31: warning: use nullptr [modernize-use-nullptr]
                        ffo = NULL;
                              ^~~~
                              nullptr
/build/src/fileflowprocessor.cpp:282:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
           SF_ERROR(m_logger, "Cannot find FileFlow Object " << (*ffo)->filekey << " in data flow set. Deleting. This should not happen.");
           ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:284:16: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
               delete *ffo;
               ^
/build/src/fileflowprocessor.cpp:261:46: note: variable declared here
int FileFlowProcessor::removeFileFlowFromSet(FileFlowObj** ffo, bool deleteFileFlow) {
                                             ^
/build/src/fileflowprocessor.cpp:285:22: warning: use nullptr [modernize-use-nullptr]
               ffo = NULL;
                     ^~~~
                     nullptr
/build/src/fileflowprocessor.cpp:292:6: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
     FileFlowObj* ffo = static_cast<FileFlowObj*>(dfo);
     ^~~~~~~~~~~
     auto
/build/src/fileflowprocessor.cpp:292:25: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]
     FileFlowObj* ffo = static_cast<FileFlowObj*>(dfo);
                        ^
/build/src/fileflowprocessor.cpp:296:6: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
     SF_DEBUG(m_logger, "Erasing flow!!! ");
     ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:298:17: warning: use nullptr [modernize-use-nullptr]
     if(proc == NULL) {
                ^~~~
                nullptr
/build/src/fileflowprocessor.cpp:299:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
         SF_ERROR(m_logger, "Could not find proc " << ffo->fileflow.procOID.hpid << " " << ffo->fileflow.procOID.createTS << " This shouldn't happen!");
         ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:302:22: warning: use nullptr [modernize-use-nullptr]
          if(file == NULL) {
                     ^~~~
                     nullptr
/build/src/fileflowprocessor.cpp:303:14: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
             SF_ERROR(m_logger, "Unable to find file object of key " << ffo->filekey  << ". Shouldn't happen!!");
             ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.cpp:309:65: warning: parameter 'now' is unused [misc-unused-parameters]
void FileFlowProcessor::exportFileFlow(DataFlowObj* dfo, time_t now) {
                                                                ^~~
                                                                 /*now*/
/build/src/fileflowprocessor.cpp:310:6: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
     FileFlowObj* ffo = static_cast<FileFlowObj*>(dfo);
     ^~~~~~~~~~~
     auto
/build/src/fileflowprocessor.cpp:310:25: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]
     FileFlowObj* ffo = static_cast<FileFlowObj*>(dfo);
                        ^
/build/src/fileflowprocessor.cpp:315:6: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
     SF_DEBUG(m_logger, "Reupping flow!!! ");
     ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/fileflowprocessor.h:48:18: warning: function 'fileflow::FileFlowProcessor::removeAndWriteFileFlow' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
            void removeAndWriteFileFlow(ProcessObj* proc, FileObj* file,  FileFlowObj** nf, string flowkey);
                 ^
/build/src/fileflowprocessor.cpp:123:32: note: the definition seen here
inline void FileFlowProcessor::removeAndWriteFileFlow(ProcessObj* proc, FileObj* file,  FileFlowObj** ff, string flowkey) {
                               ^
/build/src/fileflowprocessor.h:48:18: note: differing parameters are named here: ('nf'), in definition: ('ff')
            void removeAndWriteFileFlow(ProcessObj* proc, FileObj* file,  FileFlowObj** nf, string flowkey);
                 ^                                                                      ~~
                                                                                        ff
/build/src/fileflowprocessor.h:54:13: warning: function 'fileflow::FileFlowProcessor::FileFlowProcessor' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
            FileFlowProcessor(SysFlowContext* cxt, SysFlowWriter* writer, process::ProcessContext* procCxt, DataFlowSet* dfSet, file::FileContext* fileCxt);
            ^
/build/src/fileflowprocessor.cpp:26:20: note: the definition seen here
FileFlowProcessor::FileFlowProcessor(SysFlowContext* cxt, SysFlowWriter* writer, process::ProcessContext* processCxt, DataFlowSet* dfSet, file::FileContext* fileCxt)  {
                   ^
/build/src/fileflowprocessor.h:54:13: note: differing parameters are named here: ('procCxt'), in definition: ('processCxt')
            FileFlowProcessor(SysFlowContext* cxt, SysFlowWriter* writer, process::ProcessContext* procCxt, DataFlowSet* dfSet, file::FileContext* fileCxt);
            ^                                                                                      ~~~~~~~
                                                                                                   processCxt
/build/src/main.cpp:22:1: warning: #includes are not sorted properly [llvm-include-order]
#include <fstream>
^        ~~~~~~~~~
         "driver_config.h"
/build/src/main.cpp:25:1: warning: #includes are not sorted properly [llvm-include-order]
#include <sinsp.h>
^        ~~~~~~~~~
         "logger.h"
/build/src/main.cpp:26:10: warning: inclusion of deprecated C++ header 'stdio.h'; consider using 'cstdio' instead [modernize-deprecated-headers]
#include <stdio.h>
         ^
note: this fix will not be applied because it overlaps with another fix
/build/src/main.cpp:30:10: warning: inclusion of deprecated C++ header 'signal.h'; consider using 'csignal' instead [hicpp-deprecated-headers]
#include <signal.h>
         ^
note: this fix will not be applied because it overlaps with another fix
/build/src/main.cpp:35:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace std;
^
/build/src/main.cpp:37:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace sysflowprocessor;
^
/build/src/main.cpp:39:27: warning: use nullptr [modernize-use-nullptr]
SysFlowProcessor* s_prc = NULL;
                          ^~~~
                          nullptr
/build/src/main.cpp:43:25: warning: parameter 'i' is unused [misc-unused-parameters]
void signal_handler(int i) {
                        ^
                         /*i*/
/build/src/main.cpp:48:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int str2int (int &i, char const *s, int base = 0)
~~~ ^
auto                                              -> int
/build/src/main.cpp:48:19: warning: non-const reference parameter 'i', make it const or use a pointer [google-runtime-references]
int str2int (int &i, char const *s, int base = 0)
                  ^
/build/src/main.cpp:48:37: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
int str2int (int &i, char const *s, int base = 0)
                                    ^       ~~~~
/build/src/main.cpp:51:5: warning: consider replacing 'long' with 'int64' [google-runtime-int]
    long  l;
    ^
/build/src/main.cpp:63:9: warning: narrowing conversion from 'long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]
    i = l;
        ^
/build/src/main.cpp:68:31: warning: the parameter 'name' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
static void usage(std::string name)
                              ^
                  const      &
/build/src/main.cpp:90:1: warning: initialization of 'logger' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
CREATE_MAIN_LOGGER()
^
/build/src/logger.h:35:56: note: expanded from macro 'CREATE_MAIN_LOGGER'
#define CREATE_MAIN_LOGGER() static log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger("sysflow.main"));
                                                       ^
/usr/include/log4cxx/logger.h:685:26: note: possibly throwing function declared here
        static LoggerPtr getLogger(const char* const name);
                         ^
/build/src/main.cpp:91:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int main( int argc, char** argv )
~~~ ^
auto                              -> int
/build/src/main.cpp:93:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        string scapFile = "";
                          ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/main.cpp:93:20: warning: redundant string initialization [readability-redundant-string-init]
        string scapFile = "";
                          ^~
                          scapFile
/build/src/main.cpp:95:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        string exporterID = "";
                            ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/main.cpp:95:29: warning: redundant string initialization [readability-redundant-string-init]
        string exporterID = "";
                            ^~
                            exporterID
/build/src/main.cpp:98:9: warning: uninitialized record type: 'sigIntHandler' [hicpp-member-init]
        struct sigaction sigIntHandler;
        ^
                                      {}
/build/src/main.cpp:99:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        string schemaFile = "/usr/local/sysflow/conf/SysFlow.avsc";
                            ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/main.cpp:100:23: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        sigIntHandler.sa_handler = signal_handler;
                      ^
/usr/include/x86_64-linux-gnu/bits/sigaction.h:36:41: note: expanded from macro 'sa_handler'
# define sa_handler     __sigaction_handler.sa_handler
                                            ^
/build/src/main.cpp:105:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        string filter = "";
                        ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/main.cpp:105:25: warning: redundant string initialization [readability-redundant-string-init]
        string filter = "";
                        ^~
                        filter
/build/src/main.cpp:107:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        string logProps =  "/usr/local/sysflow/conf/log4cxx.properties";
                           ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/main.cpp:109:43: warning: use nullptr [modernize-use-nullptr]
        sigaction(SIGINT, &sigIntHandler, NULL);
                                          ^~~~
                                          nullptr
/build/src/main.cpp:112:14: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]
        while ((c = getopt (argc, argv, "hcr:w:G:s:e:l:vf:")) != -1)
                    ^
/build/src/main.cpp:127:36: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
                                if(str2int(fileDuration, duration, 10)) {
                                   ^
                                                                       != 0
/build/src/main.cpp:127:68: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
                                if(str2int(fileDuration, duration, 10)) {
                                                                   ^
/build/src/main.cpp:155:115: warning: statement should be inside braces [hicpp-braces-around-statements]
                                if (optopt == 'r' || optopt == 's' || optopt == 'f' || optopt == 'w' || optopt == 'G' || optopt == 'l')
                                                                                                                                       ^
                                                                                                                                        {
/build/src/main.cpp:156:15: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                                        fprintf (stderr, "Option -%c requires an argument.\n", optopt);
                                        ^
/build/src/main.cpp:157:21: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
                                else if (isprint (optopt))
                                         ^
                                                          != 0
/build/src/main.cpp:157:38: warning: statement should be inside braces [google-readability-braces-around-statements]
                                else if (isprint (optopt))
                                                          ^
                                                           {
/build/src/main.cpp:158:15: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                                        fprintf (stderr, "Unknown option `-%c'.\n", optopt);
                                        ^
/build/src/main.cpp:159:16: warning: statement should be inside braces [google-readability-braces-around-statements]
                                else
                                    ^
                                     {
/build/src/main.cpp:160:15: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                                        fprintf (stderr,
                                        ^
/build/src/main.cpp:170:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
           usage(argv[0]);
                 ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/main.cpp:170:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           usage(argv[0]);
                 ^
/build/src/main.cpp:175:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
           usage(argv[0]);
                 ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/main.cpp:175:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           usage(argv[0]);
                 ^
/build/src/main.cpp:190:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            SF_DEBUG(logger, "Starting sysporter..");
            ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/main.cpp:191:13: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto]
            SysFlowContext* cxt = new SysFlowContext(filterCont, fileDuration, outputDir, scapFile, schemaFile, exporterID, filter);
            ^~~~~~~~~~~~~~
            auto
/build/src/main.cpp:192:13: warning: assigning newly created 'gsl::owner<>' to non-owner 'sysflowprocessor::SysFlowProcessor *' [cppcoreguidelines-owning-memory]
            s_prc = new SysFlowProcessor(cxt);
            ^
/build/src/main.cpp:194:13: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
            delete s_prc;
            ^
/build/src/main.cpp:39:1: note: variable declared here
SysFlowProcessor* s_prc = NULL;
^
/build/src/networkflowprocessor.cpp:22:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace networkflow;
^
/build/src/networkflowprocessor.cpp:24:1: warning: initialization of 'm_logger' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
CREATE_LOGGER(NetworkFlowProcessor, "sysflow.networkflow");
^
/build/src/logger.h:33:63: note: expanded from macro 'CREATE_LOGGER'
#define CREATE_LOGGER(ClassName, logger) LoggerPtr ClassName::m_logger(Logger::getLogger(logger));
                                                              ^
/usr/include/log4cxx/logger.h:685:26: note: possibly throwing function declared here
        static LoggerPtr getLogger(const char* const name);
                         ^
/build/src/networkflowprocessor.cpp:32:23: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default]
NetworkFlowProcessor::~NetworkFlowProcessor() {
                      ^                       ~
                                              = default;
/build/src/networkflowprocessor.cpp:35:38: warning: method 'getProtocol' can be made static [readability-convert-member-functions-to-static]
inline int32_t NetworkFlowProcessor::getProtocol(scap_l4_proto proto) {
                                     ^
/build/src/networkflowprocessor.cpp:35:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
inline int32_t NetworkFlowProcessor::getProtocol(scap_l4_proto proto) {
       ~~~~~~~                       ^
       auto                                                           -> int32_t
/build/src/networkflowprocessor.cpp:40:19: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
            prt = 6;
                  ^
/build/src/networkflowprocessor.cpp:43:19: warning: 17 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            prt = 17;
                  ^
/build/src/networkflowprocessor.cpp:49:19: warning: 254 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            prt = 254;
                  ^
/build/src/networkflowprocessor.cpp:58:35: warning: method 'canonicalizeKey' can be made static [readability-convert-member-functions-to-static]
inline void NetworkFlowProcessor::canonicalizeKey(sinsp_fdinfo_t* fdinfo, NFKey* key, uint64_t tid, uint64_t fd) {
                                  ^
/build/src/networkflowprocessor.cpp:93:35: warning: method 'canonicalizeKey' can be made static [readability-convert-member-functions-to-static]
inline void NetworkFlowProcessor::canonicalizeKey(NetFlowObj* nf, NFKey* key) {
                                  ^
/build/src/networkflowprocessor.cpp:129:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   sinsp_threadinfo* ti = ev->get_thread_info();
                          ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/networkflowprocessor.cpp:156:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
       nf->netflow.opFlags |= flag;
       ^
/build/src/networkflowprocessor.cpp:174:5: warning: initializing non-owner 'NetFlowObj *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
    NetFlowObj* nf = new NetFlowObj();
    ^
/build/src/networkflowprocessor.cpp:174:5: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto]
    NetFlowObj* nf = new NetFlowObj();
    ^~~~~~~~~~
    auto
/build/src/networkflowprocessor.cpp:187:9: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
        delete nf;
        ^
/build/src/networkflowprocessor.cpp:174:5: note: variable declared here
    NetFlowObj* nf = new NetFlowObj();
    ^
/build/src/networkflowprocessor.cpp:212:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int NetworkFlowProcessor::handleNetFlowEvent(sinsp_evt* ev, OpFlags flag) {
~~~                       ^
auto                                                                      -> int
/build/src/networkflowprocessor.cpp:214:18: warning: use nullptr [modernize-use-nullptr]
    if(fdinfo == NULL) {
                 ^~~~
                 nullptr
/build/src/networkflowprocessor.cpp:215:8: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
       SF_DEBUG(m_logger, "Event: " << ev->get_name() << " doesn't have an fdinfo associated with it! ");
       ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:220:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        SF_ERROR(m_logger, "handleNetFlowEvent can only handle ip sockets, not file descriptor of type: " << fdinfo->get_typechar() << ". Ignoring..");
        ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:225:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        SF_WARN(m_logger, "IPv6 is not supported in the current version of SysFlow.  Ignoring..");
        ^
/build/src/logger.h:72:35: note: expanded from macro 'SF_WARN'
#define SF_WARN(logger, message)  LOG4CXX_WARN(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1816:86: note: expanded from macro 'LOG4CXX_WARN'
           logger->forcedLog(::log4cxx::Level::getWarn(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                     ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:232:22: warning: use nullptr [modernize-use-nullptr]
    NetFlowObj* nf = NULL;
                     ^~~~
                     nullptr
/build/src/networkflowprocessor.cpp:235:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/networkflowprocessor.cpp:238:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    SF_DEBUG(m_logger, "Key: " << key.ip1 << " " << key.ip2 << " " << key.port1 << " " << key.port2 << " " << key.tid << " " << key.fd );
    ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:239:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    SF_DEBUG(m_logger, "Size of network flow table in process " << proc->netflows.size());
    ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:242:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    SF_DEBUG(m_logger, "Key: " << key.ip1 << " " << key.ip2 << " " << key.port1 << " " << key.port2 << " " << key.tid << " " << key.fd );
    ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:250:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        SF_DEBUG(m_logger, proc->proc.exe << " " << ip4tuple << " Proto: " << getProtocol(fdinfo->get_l4proto()) << " Server: " << fdinfo->is_role_server() << " Client: " << fdinfo->is_role_client() << " " << ev->get_name() << " " << proc->proc.oid.hpid << " " << proc->proc.oid.createTS << " " << ti->m_tid << " " << ev->get_fd_num());
        ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:252:14: warning: use nullptr [modernize-use-nullptr]
    if(nf == NULL) {
             ^~~~
             nullptr
/build/src/networkflowprocessor.cpp:253:8: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       SF_DEBUG(m_logger, "Processing as new flow!");
       ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:256:8: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       SF_DEBUG(m_logger, "Processing as existing flow!");
       ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:262:28: warning: method 'removeNetworkFlow' can be made static [readability-convert-member-functions-to-static]
void NetworkFlowProcessor::removeNetworkFlow(ProcessObj* proc, NetFlowObj** nf, NFKey* key) {
                           ^
/build/src/networkflowprocessor.cpp:264:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete *nf;
    ^
/build/src/networkflowprocessor.cpp:262:64: note: variable declared here
void NetworkFlowProcessor::removeNetworkFlow(ProcessObj* proc, NetFlowObj** nf, NFKey* key) {
                                                               ^
/build/src/networkflowprocessor.cpp:265:10: warning: use nullptr [modernize-use-nullptr]
    nf = NULL;
         ^~~~
         nullptr
/build/src/networkflowprocessor.cpp:274:6: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
                if(nfi->second->netflow.opFlags & OP_ACCEPT || nfi->second->netflow.opFlags & OP_CONNECT) {
                   ^
                   ((                                      ) != 0)
/build/src/networkflowprocessor.cpp:274:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/networkflowprocessor.cpp:274:50: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
                if(nfi->second->netflow.opFlags & OP_ACCEPT || nfi->second->netflow.opFlags & OP_CONNECT) {
                                                               ^
                                                               ((                                       ) != 0)
/build/src/networkflowprocessor.cpp:274:50: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/build/src/networkflowprocessor.cpp:279:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
             SF_DEBUG(m_logger, "Removing related network flow on thread: " << nfi->first.tid);         
             ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:283:5: warning: use range-based for loop instead [modernize-loop-convert]
    for(vector<NetFlowObj*>::iterator it = nfobjs.begin(); it != nfobjs.end(); it++) {
    ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       (auto & nfobj : nfobjs)
/build/src/networkflowprocessor.cpp:283:9: warning: use auto when declaring iterators [hicpp-use-auto]
    for(vector<NetFlowObj*>::iterator it = nfobjs.begin(); it != nfobjs.end(); it++) {
        ^
note: this fix will not be applied because it overlaps with another fix
/build/src/networkflowprocessor.cpp:285:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        (*it)->netflow.opFlags |= OP_TRUNCATE;      
        ^
/build/src/networkflowprocessor.cpp:293:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int NetworkFlowProcessor::removeAndWriteNFFromProc(ProcessObj* proc, int64_t tid) {
~~~                       ^
auto                                                                              -> int
/build/src/networkflowprocessor.cpp:294:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    SF_DEBUG(m_logger, "CALLING removeAndWriteNFFromProc");
    ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:304:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            nfi->second->netflow.opFlags |= OP_TRUNCATE;
            ^
/build/src/networkflowprocessor.cpp:305:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
            SF_DEBUG(m_logger,"Writing NETFLOW!!");
            ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:309:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
            SF_DEBUG(m_logger, "Set size: " << m_dfSet->size());
            ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:311:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
            SF_DEBUG(m_logger, "After Set size: " << m_dfSet->size());
            ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:320:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int NetworkFlowProcessor::removeNetworkFlowFromSet(NetFlowObj** nfo, bool deleteNetFlow) {
~~~                       ^
auto                                                                                     -> int
/build/src/networkflowprocessor.cpp:323:13: warning: use auto when declaring iterators [modernize-use-auto]
        for(DataFlowSet::iterator iter = m_dfSet->find(*nfo); iter != m_dfSet->end(); iter++) {
            ^~~~~~~~~~~~~~~~~~~~~
            auto
/build/src/networkflowprocessor.cpp:325:17: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
                NetFlowObj* foundObj = static_cast<NetFlowObj*>(*iter);
                ^~~~~~~~~~
                auto
/build/src/networkflowprocessor.cpp:325:40: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]
                NetFlowObj* foundObj = static_cast<NetFlowObj*>(*iter);
                                       ^
/build/src/networkflowprocessor.cpp:328:22: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                     SF_DEBUG(m_logger, "Removing netflow element from multiset.");
                     ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:331:25: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
                        delete *nfo;
                        ^
/build/src/networkflowprocessor.cpp:320:52: note: variable declared here
int NetworkFlowProcessor::removeNetworkFlowFromSet(NetFlowObj** nfo, bool deleteNetFlow) {
                                                   ^
/build/src/networkflowprocessor.cpp:332:31: warning: use nullptr [modernize-use-nullptr]
                        nfo = NULL;
                              ^~~~
                              nullptr
/build/src/networkflowprocessor.cpp:341:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
           SF_ERROR(m_logger, "Cannot find Netflow Object in data flow set. Deleting. This should not happen");
           ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:343:16: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
               delete *nfo;
               ^
/build/src/networkflowprocessor.cpp:320:52: note: variable declared here
int NetworkFlowProcessor::removeNetworkFlowFromSet(NetFlowObj** nfo, bool deleteNetFlow) {
                                                   ^
/build/src/networkflowprocessor.cpp:344:22: warning: use nullptr [modernize-use-nullptr]
               nfo = NULL;
                     ^~~~
                     nullptr
/build/src/networkflowprocessor.cpp:351:6: warning: uninitialized record type: 'key' [hicpp-member-init]
     NFKey key;
     ^
              {}
/build/src/networkflowprocessor.cpp:352:6: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
     NetFlowObj* nfo = static_cast<NetFlowObj*>(dfo);
     ^~~~~~~~~~
     auto
/build/src/networkflowprocessor.cpp:352:24: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]
     NetFlowObj* nfo = static_cast<NetFlowObj*>(dfo);
                       ^
/build/src/networkflowprocessor.cpp:357:6: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
     SF_DEBUG(m_logger, "Erasing network flow!!!");
     ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:359:17: warning: use nullptr [modernize-use-nullptr]
     if(proc == NULL) {
                ^~~~
                nullptr
/build/src/networkflowprocessor.cpp:360:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
         SF_ERROR(m_logger, "Could not find proc " << nfo->netflow.procOID.hpid << " " << nfo->netflow.procOID.createTS << " This shouldn't happen!");
         ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.cpp:366:71: warning: parameter 'now' is unused [misc-unused-parameters]
void NetworkFlowProcessor::exportNetworkFlow(DataFlowObj* dfo, time_t now) {
                                                                      ^~~
                                                                       /*now*/
/build/src/networkflowprocessor.cpp:367:6: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
     NetFlowObj* nfo = static_cast<NetFlowObj*>(dfo);
     ^~~~~~~~~~
     auto
/build/src/networkflowprocessor.cpp:367:24: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]
     NetFlowObj* nfo = static_cast<NetFlowObj*>(dfo);
                       ^
/build/src/networkflowprocessor.cpp:371:6: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
     SF_DEBUG(m_logger, "Reupping network flow!!! ");
     ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/networkflowprocessor.h:55:13: warning: function 'networkflow::NetworkFlowProcessor::NetworkFlowProcessor' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
            NetworkFlowProcessor(SysFlowContext* cxt, SysFlowWriter* writer, process::ProcessContext* procCxt, DataFlowSet* dfSet);
            ^
/build/src/networkflowprocessor.cpp:25:23: note: the definition seen here
NetworkFlowProcessor::NetworkFlowProcessor(SysFlowContext* cxt, SysFlowWriter* writer, process::ProcessContext* processCxt, DataFlowSet* dfSet)  {
                      ^
/build/src/networkflowprocessor.h:55:13: note: differing parameters are named here: ('procCxt'), in definition: ('processCxt')
            NetworkFlowProcessor(SysFlowContext* cxt, SysFlowWriter* writer, process::ProcessContext* procCxt, DataFlowSet* dfSet);
            ^                                                                                         ~~~~~~~
                                                                                                      processCxt
/build/src/processcontext.cpp:22:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace process;
^
/build/src/processcontext.cpp:23:1: warning: initialization of 'm_logger' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
CREATE_LOGGER(ProcessContext, "sysflow.process");
^
/build/src/logger.h:33:63: note: expanded from macro 'CREATE_LOGGER'
#define CREATE_LOGGER(ClassName, logger) LoggerPtr ClassName::m_logger(Logger::getLogger(logger));
                                                              ^
/usr/include/log4cxx/logger.h:685:26: note: possibly throwing function declared here
        static LoggerPtr getLogger(const char* const name);
                         ^
/build/src/processcontext.cpp:24:141: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
ProcessContext::ProcessContext(SysFlowContext* cxt, container::ContainerContext* ccxt, file::FileContext* fileCxt, SysFlowWriter* writer) : m_procs(PROC_TABLE_SIZE) {
                                                                                                                                            ^
/usr/include/sparsehash/dense_hash_map:187:27: note: default parameter was declared here
                          const key_equal& eql = key_equal(),
                          ^
/build/src/processcontext.cpp:35:17: warning: an exception may be thrown in function '~ProcessContext' which should not throw exceptions [bugprone-exception-escape]
ProcessContext::~ProcessContext() {
                ^
/build/src/processcontext.cpp:39:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
ProcessObj* ProcessContext::createProcess(sinsp_threadinfo* mainthread, sinsp_evt* ev, SFObjectState state) {
~~~~~~~~~~~                 ^
auto                                                                                                        -> ProcessObj*
/build/src/processcontext.cpp:41:4: warning: initializing non-owner 'ProcessObj *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
   ProcessObj* p = new ProcessObj();
   ^
/build/src/processcontext.cpp:41:4: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto]
   ProcessObj* p = new ProcessObj();
   ^~~~~~~~~~
   auto
/build/src/processcontext.cpp:47:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   sinsp_threadinfo* ti = ev->get_thread_info();
                          ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/processcontext.cpp:48:18: warning: implicit conversion 'int32_t' (aka 'int') -> bool [readability-implicit-bool-conversion]
   p->proc.tty = ti->m_tty;
                 ^
                 (         != 0)
/build/src/processcontext.cpp:51:17: warning: use nullptr [modernize-use-nullptr]
   if(parent != NULL) {
                ^~~~
                nullptr
/build/src/processcontext.cpp:62:4: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
   SF_DEBUG(m_logger, "createProcess: The exepath is " << p->proc.exe <<  " ti->exepath: " << ti->get_exepath() << " EXE: " << mainthread->get_exe() << " CWD: " << mainthread->get_cwd());
   ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/processcontext.cpp:65:4: warning: use range-based for loop instead [modernize-loop-convert]
   for(std::vector<string>::iterator it = mainthread->m_args.begin(); it != mainthread->m_args.end(); ++it) {
   ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (auto & m_arg : mainthread->m_args)
/build/src/processcontext.cpp:65:8: warning: use auto when declaring iterators [hicpp-use-auto]
   for(std::vector<string>::iterator it = mainthread->m_args.begin(); it != mainthread->m_args.end(); ++it) {
       ^
note: this fix will not be applied because it overlaps with another fix
/build/src/processcontext.cpp:81:16: warning: use nullptr [modernize-use-nullptr]
    if(cont != NULL) {
               ^~~~
               nullptr
/build/src/processcontext.cpp:103:11: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
          SF_INFO(m_logger,"-->" << p->second->proc.oid.hpid << " " << p->second->proc.oid.createTS << " " << p->second->proc.exe << " " << p->second->proc.exeArgs);
          ^
/build/src/logger.h:73:35: note: expanded from macro 'SF_INFO'
#define SF_INFO(logger, message)  LOG4CXX_INFO(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1805:86: note: expanded from macro 'LOG4CXX_INFO'
           logger->forcedLog(::log4cxx::Level::getInfo(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                     ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/processcontext.cpp:113:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
bool ProcessContext::isAncestor(OID* oid, Process* proc) {
~~~~                 ^
auto                                                     -> bool
/build/src/processcontext.cpp:135:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    string containerId = "";
                         ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/processcontext.cpp:135:26: warning: redundant string initialization [readability-redundant-string-init]
    string containerId = "";
                         ^~
                         containerId
/build/src/processcontext.cpp:139:27: warning: use nullptr [modernize-use-nullptr]
    ContainerObj* cont1 = NULL;
                          ^~~~
                          nullptr
/build/src/processcontext.cpp:142:21: warning: use nullptr [modernize-use-nullptr]
        if(cont1 != NULL) {
                    ^~~~
                    nullptr
/build/src/processcontext.cpp:147:16: warning: use nullptr [modernize-use-nullptr]
    if(cont != NULL) {
               ^~~~
               nullptr
/build/src/processcontext.cpp:155:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
ProcessObj* ProcessContext::getProcess(sinsp_evt* ev, SFObjectState state, bool& created) {
~~~~~~~~~~~                 ^
auto                                                                                      -> ProcessObj*
/build/src/processcontext.cpp:156:30: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
      sinsp_threadinfo* ti = ev->get_thread_info();
                             ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/processcontext.cpp:162:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      SF_DEBUG(m_logger, "getProcess: PID: " << mt->m_pid << " ts " << mt->m_clone_ts <<  " EXEPATH: " << mt->m_exepath << " EXE: " << mt->m_exe);
      ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/processcontext.cpp:166:29: warning: use nullptr [modernize-use-nullptr]
      ProcessObj* process = NULL;
                            ^~~~
                            nullptr
/build/src/processcontext.cpp:176:21: warning: use nullptr [modernize-use-nullptr]
      if(process == NULL) { 
                    ^~~~
                    nullptr
/build/src/processcontext.cpp:181:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      SF_DEBUG(m_logger, "CREATING PROCESS FOR WRITING: PID: " << mt->m_pid << " ts " << mt->m_clone_ts <<  " EXEPATH: " << mt->m_exepath << " EXE: " << mt->m_exe);
      ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/processcontext.cpp:184:19: warning: use nullptr [modernize-use-nullptr]
      while(mt != NULL) {
                  ^~~~
                  nullptr
/build/src/processcontext.cpp:191:11: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
          SF_DEBUG(m_logger, "PARENT PID: " << mt->m_pid << " ts " << mt->m_clone_ts <<  " EXEPATH: " << mt->m_exepath << " EXE: " << mt->m_exe);
          ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/processcontext.cpp:194:31: warning: use nullptr [modernize-use-nullptr]
         ProcessObj* parent = NULL;
                              ^~~~
                              nullptr
/build/src/processcontext.cpp:199:17: warning: do not use 'else' after 'break' [readability-else-after-return]
              } else {
                ^~~~~~
/build/src/processcontext.cpp:205:24: warning: use nullptr [modernize-use-nullptr]
          if(parent == NULL) {
                       ^~~~
                       nullptr
/build/src/processcontext.cpp:215:11: warning: use auto when declaring iterators [hicpp-use-auto]
      for(vector<ProcessObj*>::reverse_iterator it = processes.rbegin(); it != processes.rend(); ++it) {
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          auto
/build/src/processcontext.cpp:216:11: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
          SF_DEBUG(m_logger, "Writing process " << (*it)->proc.exe << " " << (*it)->proc.oid.hpid);
          ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/processcontext.cpp:224:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
ProcessObj* ProcessContext::getProcess(OID* oid) {
~~~~~~~~~~~                 ^
auto                                             -> ProcessObj*
/build/src/processcontext.cpp:229:14: warning: use nullptr [modernize-use-nullptr]
      return NULL;
             ^~~~
             nullptr
/build/src/processcontext.cpp:232:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
bool ProcessContext::exportProcess(OID* oid) {
~~~~                 ^
auto                                         -> bool
/build/src/processcontext.cpp:235:13: warning: use nullptr [modernize-use-nullptr]
    if(p == NULL) {
            ^~~~
            nullptr
/build/src/processcontext.cpp:236:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        SF_ERROR(m_logger, "Can't find process to export! oid: " << oid->hpid << " " << oid->createTS);
        ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/processcontext.cpp:252:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   sinsp_threadinfo* ti = ev->get_thread_info();
                          ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/processcontext.cpp:260:4: warning: use range-based for loop instead [modernize-loop-convert]
   for(std::vector<string>::iterator it = mainthread->m_args.begin(); it != mainthread->m_args.end(); ++it) {
   ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (auto & m_arg : mainthread->m_args)
/build/src/processcontext.cpp:260:8: warning: use auto when declaring iterators [modernize-use-auto]
   for(std::vector<string>::iterator it = mainthread->m_args.begin(); it != mainthread->m_args.end(); ++it) {
       ^
note: this fix will not be applied because it overlaps with another fix
/build/src/processcontext.cpp:305:16: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
               delete proc;
               ^
/build/src/processcontext.cpp:280:16: note: variable declared here
               ProcessObj* proc = it->second;
               ^
/build/src/processcontext.cpp:318:16: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
               delete proc;
               ^
/build/src/processcontext.cpp:313:16: note: variable declared here
               ProcessObj* proc = it->second;
               ^
/build/src/processcontext.cpp:340:11: warning: use auto when declaring iterators [hicpp-use-auto]
      for(vector<ProcessObj*>::reverse_iterator it = processes.rbegin(); it != processes.rend(); ++it) {
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          auto
/build/src/processcontext.cpp:341:11: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
          SF_DEBUG(m_logger, "Final: writing process " << (*it)->proc.exe << " " << (*it)->proc.oid.hpid);
          ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/processcontext.cpp:351:22: warning: method 'printNetworkFlow' can be made static [readability-convert-member-functions-to-static]
void ProcessContext::printNetworkFlow(ProcessObj* proc) {
                     ^
/build/src/processcontext.cpp:353:6: warning: use range-based for loop instead [modernize-loop-convert]
     for(NetworkFlowTable::iterator it = proc->netflows.begin(); it != proc->netflows.end(); it++) {
     ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (auto & netflow : proc->netflows)
/build/src/processcontext.cpp:364:5: warning: use range-based for loop instead [modernize-loop-convert]
    for(ProcessTable::iterator it = m_procs.begin(); it != m_procs.end(); ++it) {
    ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       (auto & m_proc : m_procs)
/build/src/processcontext.cpp:372:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
             nfi->second->netflow.opFlags |= OP_TRUNCATE;
             ^
/build/src/processcontext.cpp:375:14: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
             delete nfi->second;
             ^
/usr/include/sparsehash/internal/densehashtable.h:177:3: note: variable declared here
  pointer operator->() const { return &(operator*()); }
  ^
/build/src/processcontext.cpp:378:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
             ffi->second->fileflow.opFlags |= OP_TRUNCATE;
             ^
/build/src/processcontext.cpp:382:14: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
             delete ffi->second;
             ^
/usr/include/sparsehash/internal/densehashtable.h:177:3: note: variable declared here
  pointer operator->() const { return &(operator*()); }
  ^
/build/src/processcontext.cpp:386:5: warning: use range-based for loop instead [modernize-loop-convert]
    for(ProcessTable::iterator it = m_procs.begin(); it != m_procs.end(); ++it) {
    ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       (auto & m_proc : m_procs)
/build/src/processcontext.cpp:387:11: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
          delete it->second;
          ^
/usr/include/sparsehash/internal/densehashtable.h:177:3: note: variable declared here
  pointer operator->() const { return &(operator*()); }
  ^
/build/src/processcontext.cpp:408:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete *proc; 
    ^
/build/src/processcontext.cpp:395:36: note: variable declared here
void ProcessContext::deleteProcess(ProcessObj** proc) {
                                   ^
/build/src/processcontext.cpp:409:13: warning: use nullptr [modernize-use-nullptr]
    *proc = NULL;
            ^~~~
            nullptr
/build/src/processeventprocessor.cpp:22:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace processevent;
^
/build/src/processeventprocessor.cpp:23:1: warning: initialization of 'm_logger' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
CREATE_LOGGER(ProcessEventProcessor, "sysflow.processevent");
^
/build/src/logger.h:33:63: note: expanded from macro 'CREATE_LOGGER'
#define CREATE_LOGGER(ClassName, logger) LoggerPtr ClassName::m_logger(Logger::getLogger(logger));
                                                              ^
/usr/include/log4cxx/logger.h:685:26: note: possibly throwing function declared here
        static LoggerPtr getLogger(const char* const name);
                         ^
/build/src/processeventprocessor.cpp:30:24: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
ProcessEventProcessor::~ProcessEventProcessor() {
                       ^                        ~
                                                = default;
/build/src/processeventprocessor.cpp:46:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    m_uid = ev->get_param_value_str(SF_UID);
            ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:388:47: note: default parameter was declared here
        string get_param_value_str(const char* name, bool resolved = true);
                                                     ^
/build/src/processeventprocessor.cpp:50:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/processeventprocessor.cpp:64:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/processeventprocessor.cpp:85:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/processeventprocessor.cpp:108:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/processeventprocessor.cpp:120:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
        SF_DEBUG(m_logger, "Writing modified process..." << proc->proc.exe);
        ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/reader.cpp:21:1: warning: #includes are not sorted properly [llvm-include-order]
#include <fstream>
^        ~~~~~~~~~
         "sysflow.h"
/build/src/reader.cpp:22:10: warning: inclusion of deprecated C++ header 'stdio.h'; consider using 'cstdio' instead [modernize-deprecated-headers]
#include <stdio.h>
         ^
note: this fix will not be applied because it overlaps with another fix
/build/src/reader.cpp:29:1: warning: #includes are not sorted properly [llvm-include-order]
#include "avro/ValidSchema.hh"
^        ~~~~~~~~~~~~~~~~~~~~~
         "avro/Compiler.hh"
/build/src/reader.cpp:35:1: warning: #includes are not sorted properly [llvm-include-order]
#include <arpa/inet.h>
^        ~~~~~~~~~~~~~
         "datatypes.h"
/build/src/reader.cpp:38:10: warning: inclusion of deprecated C++ header 'time.h'; consider using 'ctime' instead [modernize-deprecated-headers]
#include <time.h>
         ^~~~~~~~
         <ctime>
/build/src/reader.cpp:39:9: warning: macro 'BUFFERSIZE' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define BUFFERSIZE 20
        ^
/build/src/reader.cpp:41:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace std;
^
/build/src/reader.cpp:42:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace sysflow;
^
/build/src/reader.cpp:44:9: warning: macro 'HEADER' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define HEADER 0
        ^
/build/src/reader.cpp:45:9: warning: macro 'CONT' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define CONT 1 
        ^
/build/src/reader.cpp:46:9: warning: macro 'PROC' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define PROC 2
        ^
/build/src/reader.cpp:47:9: warning: macro 'FILE_' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define FILE_ 3
        ^
/build/src/reader.cpp:48:9: warning: macro 'PROC_EVT' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define PROC_EVT 4
        ^
/build/src/reader.cpp:49:9: warning: macro 'NET_FLOW' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define NET_FLOW 5
        ^
/build/src/reader.cpp:50:9: warning: macro 'FILE_FLOW' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define FILE_FLOW 6
        ^
/build/src/reader.cpp:51:9: warning: macro 'FILE_EVT' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define FILE_EVT 7 
        ^
/build/src/reader.cpp:53:9: warning: macro 'NANO_TO_SECS' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define NANO_TO_SECS 1000000000
        ^
/build/src/reader.cpp:55:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
Process proc;
^
/build/src/reader.cpp:55:9: warning: initialization of 'proc' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
Process proc;
        ^
../modules/sysflow/c++/sysflow/sysflow.hh:132:5: note: possibly throwing constructor declared here
    Process() :
    ^
/build/src/reader.cpp:56:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
ProcessEvent procevt;
^
/build/src/reader.cpp:56:14: warning: initialization of 'procevt' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
ProcessEvent procevt;
             ^
../modules/sysflow/c++/sysflow/sysflow.hh:191:5: note: possibly throwing constructor declared here
    ProcessEvent() :
    ^
/build/src/reader.cpp:57:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
SysFlow flow;
^
/build/src/reader.cpp:57:9: warning: initialization of 'flow' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
SysFlow flow;
        ^
../modules/sysflow/c++/sysflow/sysflow.hh:358:5: note: possibly throwing constructor declared here
    SysFlow() :
    ^
/build/src/reader.cpp:58:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
SFHeader header;
^
/build/src/reader.cpp:58:10: warning: initialization of 'header' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
SFHeader header;
         ^
../modules/sysflow/c++/sysflow/sysflow.hh:34:5: note: possibly throwing constructor declared here
    SFHeader() :
    ^
/build/src/reader.cpp:59:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
Container cont;
^
/build/src/reader.cpp:59:11: warning: initialization of 'cont' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
Container cont;
          ^
../modules/sysflow/c++/sysflow/sysflow.hh:56:5: note: possibly throwing constructor declared here
    Container() :
    ^
/build/src/reader.cpp:60:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
sysflow::File file;
^
/build/src/reader.cpp:60:15: warning: initialization of 'file' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
sysflow::File file;
              ^
../modules/sysflow/c++/sysflow/sysflow.hh:174:5: note: possibly throwing constructor declared here
    File() :
    ^
/build/src/reader.cpp:61:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
NetworkFlow netflow;
^
/build/src/reader.cpp:61:13: warning: initialization of 'netflow' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
NetworkFlow netflow;
            ^
../modules/sysflow/c++/sysflow/sysflow.hh:217:5: note: possibly throwing constructor declared here
    NetworkFlow() :
    ^
/build/src/reader.cpp:62:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
FileFlow fileflow;
^
/build/src/reader.cpp:62:10: warning: initialization of 'fileflow' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
FileFlow fileflow;
         ^
../modules/sysflow/c++/sysflow/sysflow.hh:249:5: note: possibly throwing constructor declared here
    FileFlow() :
    ^
/build/src/reader.cpp:63:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
FileEvent  fileevt;
^
/build/src/reader.cpp:63:12: warning: initialization of 'fileevt' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
FileEvent  fileevt;
           ^
../modules/sysflow/c++/sysflow/sysflow.hh:292:5: note: possibly throwing constructor declared here
    FileEvent() :
    ^
/build/src/reader.cpp:65:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
typedef google::dense_hash_map<OID*, Process*, MurmurHasher<OID*>, eqoidptr> PTable;
^
/build/src/reader.cpp:66:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
typedef google::dense_hash_map<string, sysflow::File*, MurmurHasher<string>, eqstr> FTable;
^
/build/src/reader.cpp:67:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
PTable s_procs;
^
/build/src/reader.cpp:67:8: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
PTable s_procs;
       ^
/usr/include/sparsehash/dense_hash_map:185:27: note: default parameter was declared here
  explicit dense_hash_map(size_type expected_max_items_in_table = 0,
                          ^
/build/src/reader.cpp:67:8: warning: initialization of 's_procs' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
PTable s_procs;
       ^
/usr/include/sparsehash/dense_hash_map:185:12: note: possibly throwing constructor declared here
  explicit dense_hash_map(size_type expected_max_items_in_table = 0,
           ^
/build/src/reader.cpp:68:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
FTable s_files;
^
/build/src/reader.cpp:68:8: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
FTable s_files;
       ^
/usr/include/sparsehash/dense_hash_map:188:27: note: default parameter was declared here
                          const allocator_type& alloc = allocator_type())
                          ^
/build/src/reader.cpp:68:8: warning: initialization of 's_files' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
FTable s_files;
       ^
/usr/include/sparsehash/dense_hash_map:185:12: note: possibly throwing constructor declared here
  explicit dense_hash_map(size_type expected_max_items_in_table = 0,
           ^
/build/src/reader.cpp:73:7: warning: do not declare C-style arrays, use std::array<> instead [modernize-avoid-c-arrays]
const char* Events[] = {"", "CLONE", "EXEC", "",  "EXIT", "" , "" , "" , "SETUID"};
      ^
/build/src/reader.cpp:76:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
avro::ValidSchema loadSchema(const char* filename)
~~~~~~~~~~~~~~~~~ ^
auto                                               -> avro::ValidSchema
/build/src/reader.cpp:80:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        std::ifstream ifs(filename);
                      ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/fstream:513:39: note: default parameter was declared here
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
                                      ^
/build/src/reader.cpp:89:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    string opFlags = "";
                     ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:89:22: warning: redundant string initialization [readability-redundant-string-init]
    string opFlags = "";
                     ^~
                     opFlags
/build/src/reader.cpp:90:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((fileflow.opFlags & OP_OPEN) ?  "O" : " ");
                ^
/build/src/reader.cpp:90:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileflow.opFlags & OP_OPEN) ?  "O" : " ");
                 ^
                                              != 0
/build/src/reader.cpp:90:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileflow.opFlags & OP_OPEN) ?  "O" : " ");
                  ^
/build/src/reader.cpp:91:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((fileflow.opFlags & OP_ACCEPT) ?  "A" : " ");
                ^
/build/src/reader.cpp:91:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileflow.opFlags & OP_ACCEPT) ?  "A" : " ");
                 ^
                                                != 0
/build/src/reader.cpp:91:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileflow.opFlags & OP_ACCEPT) ?  "A" : " ");
                  ^
/build/src/reader.cpp:92:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((fileflow.opFlags & OP_CONNECT) ?  "C" : " ");
                ^
/build/src/reader.cpp:92:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileflow.opFlags & OP_CONNECT) ?  "C" : " ");
                 ^
                                                 != 0
/build/src/reader.cpp:92:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileflow.opFlags & OP_CONNECT) ?  "C" : " ");
                  ^
/build/src/reader.cpp:93:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((fileflow.opFlags & OP_WRITE_SEND) ?  "W" : " ");
                ^
/build/src/reader.cpp:93:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileflow.opFlags & OP_WRITE_SEND) ?  "W" : " ");
                 ^
                                                    != 0
/build/src/reader.cpp:93:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileflow.opFlags & OP_WRITE_SEND) ?  "W" : " ");
                  ^
/build/src/reader.cpp:94:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((fileflow.opFlags & OP_READ_RECV) ?  "R" : " ");
                ^
/build/src/reader.cpp:94:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileflow.opFlags & OP_READ_RECV) ?  "R" : " ");
                 ^
                                                   != 0
/build/src/reader.cpp:94:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileflow.opFlags & OP_READ_RECV) ?  "R" : " ");
                  ^
/build/src/reader.cpp:95:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((fileflow.opFlags & OP_SETNS) ?  "N" : " ");
                ^
/build/src/reader.cpp:95:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileflow.opFlags & OP_SETNS) ?  "N" : " ");
                 ^
                                               != 0
/build/src/reader.cpp:95:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileflow.opFlags & OP_SETNS) ?  "N" : " ");
                  ^
/build/src/reader.cpp:96:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((fileflow.opFlags & OP_CLOSE) ?  "C" : " ");
                ^
/build/src/reader.cpp:96:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileflow.opFlags & OP_CLOSE) ?  "C" : " ");
                 ^
                                               != 0
/build/src/reader.cpp:96:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileflow.opFlags & OP_CLOSE) ?  "C" : " ");
                  ^
/build/src/reader.cpp:97:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((fileflow.opFlags & OP_TRUNCATE) ?  "T" : " ");
                ^
/build/src/reader.cpp:97:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileflow.opFlags & OP_TRUNCATE) ?  "T" : " ");
                 ^
                                                  != 0
/build/src/reader.cpp:97:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileflow.opFlags & OP_TRUNCATE) ?  "T" : " ");
                  ^
/build/src/reader.cpp:98:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((fileflow.opFlags & OP_DIGEST) ?  "D" : " ");
                ^
/build/src/reader.cpp:98:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileflow.opFlags & OP_DIGEST) ?  "D" : " ");
                 ^
                                                != 0
/build/src/reader.cpp:98:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileflow.opFlags & OP_DIGEST) ?  "D" : " ");
                  ^
/build/src/reader.cpp:100:23: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
    time_t startTs = ((time_t)(fileflow.ts/NANO_TO_SECS));
                      ^~~~~~~~
                      static_cast<time_t>
/build/src/reader.cpp:102:21: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
    time_t endTs = ((time_t)(fileflow.endTs/NANO_TO_SECS));
                    ^~~~~~~~
                    static_cast<time_t>
/build/src/reader.cpp:103:5: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    char startTime[100];
    ^
/build/src/reader.cpp:103:20: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    char startTime[100];
                   ^
/build/src/reader.cpp:104:5: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    char endTime[100];
    ^
/build/src/reader.cpp:104:18: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    char endTime[100];
                 ^
/build/src/reader.cpp:105:14: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    strftime(startTime, 99, "%x %X %Z", localtime(&startTs));
             ^
/build/src/reader.cpp:105:25: warning: 99 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    strftime(startTime, 99, "%x %X %Z", localtime(&startTs));
                        ^
/build/src/reader.cpp:106:15: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
     strftime(endTime, 99, "%x %X %Z", localtime(&endTs));
              ^
/build/src/reader.cpp:106:24: warning: 99 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
     strftime(endTime, 99, "%x %X %Z", localtime(&endTs));
                       ^
/build/src/reader.cpp:108:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    string key(fileflow.fileOID.begin(), fileflow.fileOID.end());
           ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:605:8: note: default parameter was declared here
                     const _Alloc& __a = _Alloc())
                     ^
/build/src/reader.cpp:118:32: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
        cout << "FILEFLOW " << startTime << " " << endTime << " " <<  opFlags << " TID: " << fileflow.tid << " FD: " << fileflow.fd << " WBytes: " << fileflow.numWSendBytes << " RBytes: " << fileflow.numRRecvBytes << " WOps: " << fileflow.numWSendOps << " ROps: " << fileflow.numRRecvOps << " " << fileflow.procOID.hpid << " " << fileflow.procOID.createTS << endl;
                               ^
/build/src/reader.cpp:118:52: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
        cout << "FILEFLOW " << startTime << " " << endTime << " " <<  opFlags << " TID: " << fileflow.tid << " FD: " << fileflow.fd << " WBytes: " << fileflow.numWSendBytes << " RBytes: " << fileflow.numRRecvBytes << " WOps: " << fileflow.numWSendOps << " ROps: " << fileflow.numRRecvOps << " " << fileflow.procOID.hpid << " " << fileflow.procOID.createTS << endl;
                                                   ^
/build/src/reader.cpp:126:31: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
       cout << "FILEFLOW " << startTime << " " << endTime << " " <<  opFlags << " TID: " << fileflow.tid << " FD: " << fileflow.fd << " WBytes: " << fileflow.numWSendBytes << " RBytes: " << fileflow.numRRecvBytes << " WOps: " << fileflow.numWSendOps << " ROps: " << fileflow.numRRecvOps << " " << fileflow.procOID.hpid << " " << fileflow.procOID.createTS << endl;
                              ^
/build/src/reader.cpp:126:51: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
       cout << "FILEFLOW " << startTime << " " << endTime << " " <<  opFlags << " TID: " << fileflow.tid << " FD: " << fileflow.fd << " WBytes: " << fileflow.numWSendBytes << " RBytes: " << fileflow.numRRecvBytes << " WOps: " << fileflow.numWSendOps << " ROps: " << fileflow.numRRecvOps << " " << fileflow.procOID.hpid << " " << fileflow.procOID.createTS << endl;
                                                  ^
/build/src/reader.cpp:128:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
       string container = "";
                          ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:128:27: warning: redundant string initialization [readability-redundant-string-init]
       string container = "";
                          ^~
                          container
/build/src/reader.cpp:133:93: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       cout << it->second->exe << " " << container << " " << it->second->oid.hpid << " " << startTime << " " << endTime << " " <<  opFlags << " Resource: " << fi->second->restype << " PATH: " << fi->second->path << " FD: " << fileflow.fd << " TID: " << fileflow.tid <<  " Open Flags: " << fileflow.openFlags <<  " WBytes: " << fileflow.numWSendBytes << " RBytes: " << fileflow.numRRecvBytes << " WOps: " << fileflow.numWSendOps << " ROps: " << fileflow.numRRecvOps << " " <<  it->second->exe << " " << it->second->exeArgs <<  endl;
                                                                                            ^
/build/src/reader.cpp:133:113: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       cout << it->second->exe << " " << container << " " << it->second->oid.hpid << " " << startTime << " " << endTime << " " <<  opFlags << " Resource: " << fi->second->restype << " PATH: " << fi->second->path << " FD: " << fileflow.fd << " TID: " << fileflow.tid <<  " Open Flags: " << fileflow.openFlags <<  " WBytes: " << fileflow.numWSendBytes << " RBytes: " << fileflow.numRRecvBytes << " WOps: " << fileflow.numWSendOps << " ROps: " << fileflow.numRRecvOps << " " <<  it->second->exe << " " << it->second->exeArgs <<  endl;
                                                                                                                ^
/build/src/reader.cpp:139:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    string opFlags = "";
                     ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:139:22: warning: redundant string initialization [readability-redundant-string-init]
    string opFlags = "";
                     ^~
                     opFlags
/build/src/reader.cpp:140:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileEvt.opFlags & OP_MKDIR) ?  "MKDIR" : " ");
                 ^
                                              != 0
/build/src/reader.cpp:140:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileEvt.opFlags & OP_MKDIR) ?  "MKDIR" : " ");
                  ^
/build/src/reader.cpp:141:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileEvt.opFlags & OP_RMDIR) ?  "RMDIR" : " ");
                 ^
                                              != 0
/build/src/reader.cpp:141:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileEvt.opFlags & OP_RMDIR) ?  "RMDIR" : " ");
                  ^
/build/src/reader.cpp:142:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileEvt.opFlags & OP_LINK) ?  "LINK" : " ");
                 ^
                                             != 0
/build/src/reader.cpp:142:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileEvt.opFlags & OP_LINK) ?  "LINK" : " ");
                  ^
/build/src/reader.cpp:143:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileEvt.opFlags & OP_SYMLINK) ?  "SYMLINK" : " ");
                 ^
                                                != 0
/build/src/reader.cpp:143:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileEvt.opFlags & OP_SYMLINK) ?  "SYMLINK" : " ");
                  ^
/build/src/reader.cpp:144:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileEvt.opFlags & OP_UNLINK) ?  "UNLINK" : " ");
                 ^
                                               != 0
/build/src/reader.cpp:144:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileEvt.opFlags & OP_UNLINK) ?  "UNLINK" : " ");
                  ^
/build/src/reader.cpp:145:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((fileEvt.opFlags & OP_RENAME) ?  "RENAME" : " ");
                 ^
                                               != 0
/build/src/reader.cpp:145:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((fileEvt.opFlags & OP_RENAME) ?  "RENAME" : " ");
                  ^
/build/src/reader.cpp:146:23: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
    time_t startTs = ((time_t)(fileEvt.ts/NANO_TO_SECS));
                      ^~~~~~~~
                      static_cast<time_t>
/build/src/reader.cpp:148:5: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    char startTime[100];
    ^
/build/src/reader.cpp:148:20: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    char startTime[100];
                   ^
/build/src/reader.cpp:149:14: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    strftime(startTime, 99, "%x %X %Z", localtime(&startTs));
             ^
/build/src/reader.cpp:149:25: warning: 99 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    strftime(startTime, 99, "%x %X %Z", localtime(&startTs));
                        ^
/build/src/reader.cpp:151:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    string key(fileEvt.fileOID.begin(), fileEvt.fileOID.end());
           ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:605:8: note: default parameter was declared here
                     const _Alloc& __a = _Alloc())
                     ^
/build/src/reader.cpp:161:32: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        cout << "FILE_EVT " << startTime << " "  <<  opFlags << " TID: " << fileEvt.tid << " " << fileEvt.procOID.hpid << " " << fileEvt.procOID.createTS << endl;
                               ^
/build/src/reader.cpp:169:32: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        cout << "FILE_EVT " << startTime << " "  <<  opFlags << " TID: " << fileEvt.tid <<  " " << fileEvt.procOID.hpid << " " << fileEvt.procOID.createTS << " " << fi->second->restype << " " << fi->second->path << endl;
                               ^
/build/src/reader.cpp:171:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
       string container = "";
                          ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:171:27: warning: redundant string initialization [readability-redundant-string-init]
       string container = "";
                          ^~
                          container
/build/src/reader.cpp:176:93: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       cout << it->second->exe << " " << container << " " << it->second->oid.hpid << " " << startTime  << " " <<  opFlags << " Resource: " << (char)fi->second->restype << " PATH: " << fi->second->path <<  " TID: " << fileEvt.tid <<  " " <<  it->second->exe << " " << it->second->exeArgs;
                                                                                            ^
/build/src/reader.cpp:176:143: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
       cout << it->second->exe << " " << container << " " << it->second->oid.hpid << " " << startTime  << " " <<  opFlags << " Resource: " << (char)fi->second->restype << " PATH: " << fi->second->path <<  " TID: " << fileEvt.tid <<  " " <<  it->second->exe << " " << it->second->exeArgs;
                                                                                                                                              ^~~~~~
                                                                                                                                              static_cast<char>(       )
/build/src/reader.cpp:179:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
          string key2(newFileOID.begin(), newFileOID.end());
                 ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:605:8: note: default parameter was declared here
                     const _Alloc& __a = _Alloc())
                     ^
/build/src/reader.cpp:194:5: warning: uninitialized record type: 'srcIP' [cppcoreguidelines-pro-type-member-init]
    struct in_addr srcIP;
    ^
                        {}
/build/src/reader.cpp:195:5: warning: uninitialized record type: 'dstIP' [cppcoreguidelines-pro-type-member-init]
    struct in_addr dstIP;
    ^
                        {}
/build/src/reader.cpp:198:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    string opFlags = "";
                     ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:198:22: warning: redundant string initialization [readability-redundant-string-init]
    string opFlags = "";
                     ^~
                     opFlags
/build/src/reader.cpp:199:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((netflow.opFlags & OP_ACCEPT) ?  "A" : " ");
                ^
/build/src/reader.cpp:199:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((netflow.opFlags & OP_ACCEPT) ?  "A" : " ");
                 ^
                                               != 0
/build/src/reader.cpp:199:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((netflow.opFlags & OP_ACCEPT) ?  "A" : " ");
                  ^
/build/src/reader.cpp:200:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((netflow.opFlags & OP_CONNECT) ?  "C" : " ");
                ^
/build/src/reader.cpp:200:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((netflow.opFlags & OP_CONNECT) ?  "C" : " ");
                 ^
                                                != 0
/build/src/reader.cpp:200:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((netflow.opFlags & OP_CONNECT) ?  "C" : " ");
                  ^
/build/src/reader.cpp:201:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    opFlags +=  ((netflow.opFlags & OP_WRITE_SEND) ?  "S" : " ");
                ^
/build/src/reader.cpp:201:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((netflow.opFlags & OP_WRITE_SEND) ?  "S" : " ");
                 ^
                                                   != 0
/build/src/reader.cpp:201:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((netflow.opFlags & OP_WRITE_SEND) ?  "S" : " ");
                  ^
/build/src/reader.cpp:202:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((netflow.opFlags & OP_READ_RECV) ?  "R" : " ");
                ^
/build/src/reader.cpp:202:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((netflow.opFlags & OP_READ_RECV) ?  "R" : " ");
                 ^
                                                  != 0
/build/src/reader.cpp:202:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((netflow.opFlags & OP_READ_RECV) ?  "R" : " ");
                  ^
/build/src/reader.cpp:203:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((netflow.opFlags & OP_CLOSE) ?  "C" : " ");
                ^
/build/src/reader.cpp:203:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((netflow.opFlags & OP_CLOSE) ?  "C" : " ");
                 ^
                                              != 0
/build/src/reader.cpp:203:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((netflow.opFlags & OP_CLOSE) ?  "C" : " ");
                  ^
/build/src/reader.cpp:204:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    opFlags +=  ((netflow.opFlags & OP_TRUNCATE) ?  "T" : " ");
                ^
/build/src/reader.cpp:204:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((netflow.opFlags & OP_TRUNCATE) ?  "T" : " ");
                 ^
                                                 != 0
/build/src/reader.cpp:204:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((netflow.opFlags & OP_TRUNCATE) ?  "T" : " ");
                  ^
/build/src/reader.cpp:205:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    opFlags +=  ((netflow.opFlags & OP_DIGEST) ?  "D" : " ");
                ^
/build/src/reader.cpp:205:18: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    opFlags +=  ((netflow.opFlags & OP_DIGEST) ?  "D" : " ");
                 ^
                                               != 0
/build/src/reader.cpp:205:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    opFlags +=  ((netflow.opFlags & OP_DIGEST) ?  "D" : " ");
                  ^
/build/src/reader.cpp:207:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    string srcIPStr = string(inet_ntoa(srcIP));
                      ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:208:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    string dstIPStr = string(inet_ntoa(dstIP));
                      ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:209:23: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
    time_t startTs = ((time_t)(netflow.ts/NANO_TO_SECS));
                      ^~~~~~~~
                      static_cast<time_t>
/build/src/reader.cpp:210:21: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
    time_t endTs = ((time_t)(netflow.endTs/NANO_TO_SECS));
                    ^~~~~~~~
                    static_cast<time_t>
/build/src/reader.cpp:211:5: warning: do not declare C-style arrays, use std::array<> instead [modernize-avoid-c-arrays]
    char startTime[100];
    ^
/build/src/reader.cpp:211:20: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    char startTime[100];
                   ^
/build/src/reader.cpp:212:5: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    char endTime[100];
    ^
/build/src/reader.cpp:212:18: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    char endTime[100];
                 ^
/build/src/reader.cpp:213:14: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    strftime(startTime, 99, "%x %X %Z", localtime(&startTs));
             ^
/build/src/reader.cpp:213:25: warning: 99 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    strftime(startTime, 99, "%x %X %Z", localtime(&startTs));
                        ^
/build/src/reader.cpp:214:15: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
     strftime(endTime, 99, "%x %X %Z", localtime(&endTs));
              ^
/build/src/reader.cpp:214:24: warning: 99 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
     strftime(endTime, 99, "%x %X %Z", localtime(&endTs));
                       ^
/build/src/reader.cpp:219:30: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       cout << "NETFLOW " << startTime << " " << endTime << " " <<  opFlags <<  " TID: " << netflow.tid <<  " SIP: " << srcIPStr << " " << " DIP: " << dstIPStr << " SPORT: " << netflow.sport << " DPORT: " << netflow.dport << " PROTO: " << netflow.proto << " WBytes: " << netflow.numWSendBytes << " RBytes: " << netflow.numRRecvBytes << " WOps: " << netflow.numWSendOps << " ROps: " << netflow.numRRecvOps << " " << netflow.procOID.hpid << " " << netflow.procOID.createTS <<  endl;
                             ^
/build/src/reader.cpp:219:50: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       cout << "NETFLOW " << startTime << " " << endTime << " " <<  opFlags <<  " TID: " << netflow.tid <<  " SIP: " << srcIPStr << " " << " DIP: " << dstIPStr << " SPORT: " << netflow.sport << " DPORT: " << netflow.dport << " PROTO: " << netflow.proto << " WBytes: " << netflow.numWSendBytes << " RBytes: " << netflow.numRRecvBytes << " WOps: " << netflow.numWSendOps << " ROps: " << netflow.numRRecvOps << " " << netflow.procOID.hpid << " " << netflow.procOID.createTS <<  endl;
                                                 ^
/build/src/reader.cpp:221:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
       string container = "";
                          ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:221:27: warning: redundant string initialization [readability-redundant-string-init]
       string container = "";
                          ^~
                          container
/build/src/reader.cpp:226:93: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       cout << it->second->exe << " " << container << " " << it->second->oid.hpid << " " << startTime << " " << endTime << " " <<  opFlags << " TID: " << netflow.tid << " SIP: " << srcIPStr << " " << " DIP: " << dstIPStr << " SPORT: " << netflow.sport << " DPORT: " << netflow.dport << " PROTO: " << netflow.proto << " WBytes: " << netflow.numWSendBytes << " RBytes: " << netflow.numRRecvBytes << " WOps: " << netflow.numWSendOps << " ROps: " << netflow.numRRecvOps << " " <<  it->second->exe << " " << it->second->exeArgs << endl;
                                                                                            ^
/build/src/reader.cpp:226:113: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
       cout << it->second->exe << " " << container << " " << it->second->oid.hpid << " " << startTime << " " << endTime << " " <<  opFlags << " TID: " << netflow.tid << " SIP: " << srcIPStr << " " << " DIP: " << dstIPStr << " SPORT: " << netflow.sport << " DPORT: " << netflow.dport << " PROTO: " << netflow.proto << " WBytes: " << netflow.numWSendBytes << " RBytes: " << netflow.numRRecvBytes << " WOps: " << netflow.numWSendOps << " ROps: " << netflow.numRRecvOps << " " <<  it->second->exe << " " << it->second->exeArgs << endl;
                                                                                                                ^
/build/src/reader.cpp:231:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
sysflow::File* createFile(sysflow::File file) {
~~~~~~~~~~~~~~ ^
auto                                          -> sysflow::File*
/build/src/reader.cpp:231:41: warning: the parameter 'file' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
sysflow::File* createFile(sysflow::File file) {
                                        ^
                          const        &
/build/src/reader.cpp:232:4: warning: initializing non-owner 'sysflow::File *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
   sysflow::File* f = new sysflow::File();
   ^
/build/src/reader.cpp:232:4: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto]
   sysflow::File* f = new sysflow::File();
   ^~~~~~~~~~~~~
   auto
/build/src/reader.cpp:246:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
Process*  createProcess(Process proc) {
~~~~~~~~  ^
auto                                  -> Process*
/build/src/reader.cpp:246:33: warning: the parameter 'proc' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
Process*  createProcess(Process proc) {
                                ^
                        const  &
/build/src/reader.cpp:247:4: warning: initializing non-owner 'sysflow::Process *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
   Process* p = new Process();
   ^
/build/src/reader.cpp:247:4: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto]
   Process* p = new Process();
   ^~~~~~~
   auto
/build/src/reader.cpp:291:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int runEventLoop(string sysFile, string schemaFile) {
~~~ ^
auto                                                -> int
/build/src/reader.cpp:291:25: warning: the parameter 'sysFile' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
int runEventLoop(string sysFile, string schemaFile) {
                        ^
                 const &
/build/src/reader.cpp:291:41: warning: the parameter 'schemaFile' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
int runEventLoop(string sysFile, string schemaFile) {
                                        ^
                                 const &
/build/src/reader.cpp:292:10: warning: unused variable 'res' [clang-diagnostic-unused-variable]
        int32_t res;
                ^
/build/src/reader.cpp:334:26: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
                         delete oldP;
                         ^
/build/src/reader.cpp:332:26: note: variable declared here
                         Process* oldP = it->second;
                         ^
/build/src/reader.cpp:348:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                  string key(file.oid.begin(), file.oid.end());
                         ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:605:8: note: default parameter was declared here
                     const _Alloc& __a = _Alloc())
                     ^
/build/src/reader.cpp:350:92: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                  cout << "FILE: " << f->path << " " << f->ts << " " << f->state << " " << (char)f->restype <<  endl;
                                                                                           ^~~~~~
                                                                                           static_cast<char>( )
/build/src/reader.cpp:361:37: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
                time_t timestamp = ((time_t)(procevt.ts/NANO_TO_SECS));
                                    ^~~~~~~~
                                    static_cast<time_t>
/build/src/reader.cpp:362:17: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                char times[100];
                ^
/build/src/reader.cpp:362:28: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
                char times[100];
                           ^
/build/src/reader.cpp:363:26: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                strftime(times, 99, "%x %X %Z", localtime(&timestamp));
                         ^
/build/src/reader.cpp:363:33: warning: 99 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
                strftime(times, 99, "%x %X %Z", localtime(&timestamp));
                                ^
/build/src/reader.cpp:367:43: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                   cout << "PROC_EVT " << times << " " << " TID: " << procevt.tid << Events[procevt.opFlags] << " " <<  " " << procevt.ret << " OID: " << procevt.procOID.hpid << " " << procevt.procOID.createTS << endl;
                                          ^
/build/src/reader.cpp:367:86: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
                   cout << "PROC_EVT " << times << " " << " TID: " << procevt.tid << Events[procevt.opFlags] << " " <<  " " << procevt.ret << " OID: " << procevt.procOID.hpid << " " << procevt.procOID.createTS << endl;
                                                                                     ^
/build/src/reader.cpp:370:39: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                   string container = "";
                                      ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:370:39: warning: redundant string initialization [readability-redundant-string-init]
                   string container = "";
                                      ^~
                                      container
/build/src/reader.cpp:375:106: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
                   cout << it->second->exe << " " << container << " " << it->second->oid.hpid << " " <<  times << " " << " TID: " << procevt.tid << " " << Events[procevt.opFlags] << " " <<  " " << procevt.ret <<  " " << procevt.procOID.createTS << " " <<  it->second->exe << " " << it->second->exeArgs ;
                                                                                                         ^
/build/src/reader.cpp:375:156: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
                   cout << it->second->exe << " " << container << " " << it->second->oid.hpid << " " <<  times << " " << " TID: " << procevt.tid << " " << Events[procevt.opFlags] << " " <<  " " << procevt.ret <<  " " << procevt.procOID.createTS << " " <<  it->second->exe << " " << it->second->exeArgs ;
                                                                                                                                                           ^
/build/src/reader.cpp:387:29: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
                            delete it->second;
                            ^
/usr/include/sparsehash/internal/densehashtable.h:177:3: note: variable declared here
  pointer operator->() const { return &(operator*()); }
  ^
/build/src/reader.cpp:434:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
int main( int argc, char** argv )
    ^
/build/src/reader.cpp:434:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int main( int argc, char** argv )
~~~ ^
auto                              -> int
/build/src/reader.cpp:437:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        string schemaFile = "/usr/local/sysflow/conf/SysFlow.avsc";
                            ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:447:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        s_files.set_empty_key("-1");
                              ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:448:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        s_files.set_deleted_key("-2");
                                ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/reader.cpp:449:14: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [cppcoreguidelines-narrowing-conversions]
        while ((c = getopt (argc, argv, "lr:w:s:qk")) != -1)
                    ^
/build/src/reader.cpp:466:47: warning: statement should be inside braces [hicpp-braces-around-statements]
                                if (optopt == 'r' || optopt == 'm')
                                                                   ^
                                                                    {
/build/src/reader.cpp:467:15: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                                        fprintf (stderr, "Option -%c requires an argument.\n", optopt);
                                        ^
/build/src/reader.cpp:468:21: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
                                else if (isprint (optopt))
                                         ^
                                                          != 0
/build/src/reader.cpp:468:38: warning: statement should be inside braces [hicpp-braces-around-statements]
                                else if (isprint (optopt))
                                                          ^
                                                           {
/build/src/reader.cpp:469:15: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                                        fprintf (stderr, "Unknown option `-%c'.\n", optopt);
                                        ^
/build/src/reader.cpp:470:16: warning: statement should be inside braces [google-readability-braces-around-statements]
                                else
                                    ^
                                     {
/build/src/reader.cpp:471:15: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                                        fprintf (stderr,
                                        ^
/build/src/sysflowcontext.cpp:22:1: warning: initialization of 'm_logger' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
CREATE_LOGGER(SysFlowContext, "sysflow.sysflowcontext");
^
/build/src/logger.h:33:63: note: expanded from macro 'CREATE_LOGGER'
#define CREATE_LOGGER(ClassName, logger) LoggerPtr ClassName::m_logger(Logger::getLogger(logger));
                                                              ^
/usr/include/log4cxx/logger.h:685:26: note: possibly throwing function declared here
        static LoggerPtr getLogger(const char* const name);
                         ^
/build/src/sysflowcontext.cpp:24:1: warning: constructor does not initialize these fields: m_start, timeStamp [cppcoreguidelines-pro-type-member-init]
SysFlowContext::SysFlowContext(bool fCont, int fDur, string oFile, string sFile, string schFile, string expID, string filter) : m_filterCont(fCont),  m_fileDuration(fDur),
^
/build/src/sysflowcontext.cpp:24:75: warning: the parameter 'sFile' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
SysFlowContext::SysFlowContext(bool fCont, int fDur, string oFile, string sFile, string schFile, string expID, string filter) : m_filterCont(fCont),  m_fileDuration(fDur),
                                                                          ^
                                                                   const &
/build/src/sysflowcontext.cpp:24:82: warning: pass by value and use std::move [modernize-pass-by-value]
SysFlowContext::SysFlowContext(bool fCont, int fDur, string oFile, string sFile, string schFile, string expID, string filter) : m_filterCont(fCont),  m_fileDuration(fDur),
                                                                                 ^
/build/src/sysflowcontext.cpp:24:98: warning: pass by value and use std::move [modernize-pass-by-value]
SysFlowContext::SysFlowContext(bool fCont, int fDur, string oFile, string sFile, string schFile, string expID, string filter) : m_filterCont(fCont),  m_fileDuration(fDur),
                                                                                                 ^
/build/src/sysflowcontext.cpp:24:112: warning: pass by value and use std::move [modernize-pass-by-value]
SysFlowContext::SysFlowContext(bool fCont, int fDur, string oFile, string sFile, string schFile, string expID, string filter) : m_filterCont(fCont),  m_fileDuration(fDur),
                                                                                                               ^
/build/src/sysflowcontext.cpp:25:61: warning: parameter 'schFile' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
       m_outputFile(oFile), m_scapFile(sFile), m_schemaFile(schFile), m_exporterID(expID), m_nfExportInterval(30), m_nfExpireInterval(30), m_filter(filter) {
                                                            ^
                                                            std::move( )
/build/src/sysflowcontext.cpp:25:84: warning: parameter 'expID' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
       m_outputFile(oFile), m_scapFile(sFile), m_schemaFile(schFile), m_exporterID(expID), m_nfExportInterval(30), m_nfExpireInterval(30), m_filter(filter) {
                                                                                   ^
                                                                                   std::move( )
/build/src/sysflowcontext.cpp:25:111: warning: 30 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
       m_outputFile(oFile), m_scapFile(sFile), m_schemaFile(schFile), m_exporterID(expID), m_nfExportInterval(30), m_nfExpireInterval(30), m_filter(filter) {
                                                                                                              ^
/build/src/sysflowcontext.cpp:25:135: warning: 30 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
       m_outputFile(oFile), m_scapFile(sFile), m_schemaFile(schFile), m_exporterID(expID), m_nfExportInterval(30), m_nfExpireInterval(30), m_filter(filter) {
                                                                                                                                      ^
/build/src/sysflowcontext.cpp:25:149: warning: parameter 'filter' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
       m_outputFile(oFile), m_scapFile(sFile), m_schemaFile(schFile), m_exporterID(expID), m_nfExportInterval(30), m_nfExpireInterval(30), m_filter(filter) {
                                                                                                                                                    ^
                                                                                                                                                    std::move( )
/build/src/sysflowcontext.cpp:26:4: warning: assigning newly created 'gsl::owner<>' to non-owner 'sinsp *' [cppcoreguidelines-owning-memory]
   m_inspector = new sinsp();
   ^
/build/src/sysflowcontext.cpp:37:22: warning: use nullptr [modernize-use-nullptr]
   if(m_inspector != NULL) {
                     ^~~~
                     nullptr
/build/src/sysflowcontext.cpp:42:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
string SysFlowContext::getExporterID() {
~~~~~~                 ^
auto                                   -> string
/build/src/sysflowcontext.cpp:45:19: warning: use nullptr [modernize-use-nullptr]
         if(mi != NULL) {
                  ^~~~
                  nullptr
/build/src/sysflowcontext.cpp:46:29: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
             m_exporterID = mi->hostname;
                            ^
/build/src/sysflowcontext.cpp:48:14: warning: do not declare C-style arrays, use std::array<> instead [hicpp-avoid-c-arrays]
             char host[257];
             ^
/build/src/sysflowcontext.cpp:48:24: warning: 257 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
             char host[257];
                       ^
/build/src/sysflowcontext.cpp:49:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
             memset(host, 0, 257);
                    ^
/build/src/sysflowcontext.cpp:49:30: warning: 257 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
             memset(host, 0, 257);
                             ^
/build/src/sysflowcontext.cpp:50:17: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
             if(gethostname(host, 256) ) {
                ^
                                       != 0
/build/src/sysflowcontext.cpp:50:29: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
             if(gethostname(host, 256) ) {
                            ^
/build/src/sysflowcontext.cpp:50:35: warning: 256 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
             if(gethostname(host, 256) ) {
                                  ^
/build/src/sysflowcontext.cpp:51:19: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                  SF_ERROR(m_logger, "Error calling gethostname for sysflow header. Error Code: " <<  std::strerror(errno));
                  ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/sysflowcontext.cpp:54:29: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
             m_exporterID = host;
                            ^
/build/src/sysflowcontext.h:50:9: warning: function 'SysFlowContext::SysFlowContext' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
        SysFlowContext(bool fCont, int fDur, string oFile, string sFile, string schFile, string exporterID, string filter); 
        ^
/build/src/sysflowcontext.cpp:24:17: note: the definition seen here
SysFlowContext::SysFlowContext(bool fCont, int fDur, string oFile, string sFile, string schFile, string expID, string filter) : m_filterCont(fCont),  m_fileDuration(fDur),
                ^
/build/src/sysflowcontext.h:50:9: note: differing parameters are named here: ('exporterID'), in definition: ('expID')
        SysFlowContext(bool fCont, int fDur, string oFile, string sFile, string schFile, string exporterID, string filter); 
        ^                                                                                       ~~~~~~~~~~
                                                                                                expID
/build/src/sysflowprocessor.cpp:21:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace sysflowprocessor;
^
/build/src/sysflowprocessor.cpp:22:1: warning: initialization of 'm_logger' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
CREATE_LOGGER(SysFlowProcessor, "sysflow.sysflowprocessor");
^
/build/src/logger.h:33:63: note: expanded from macro 'CREATE_LOGGER'
#define CREATE_LOGGER(ClassName, logger) LoggerPtr ClassName::m_logger(Logger::getLogger(logger));
                                                              ^
/usr/include/log4cxx/logger.h:685:26: note: possibly throwing function declared here
        static LoggerPtr getLogger(const char* const name);
                         ^
/build/src/sysflowprocessor.cpp:29:21: warning: use nullptr [modernize-use-nullptr]
       start = time(NULL);
                    ^~~~
                    nullptr
/build/src/sysflowprocessor.cpp:31:4: warning: assigning newly created 'gsl::owner<>' to non-owner 'SysFlowWriter *' [cppcoreguidelines-owning-memory]
   m_writer = new SysFlowWriter(cxt, start);
   ^
/build/src/sysflowprocessor.cpp:32:4: warning: assigning newly created 'gsl::owner<>' to non-owner 'container::ContainerContext *' [cppcoreguidelines-owning-memory]
   m_containerCxt = new container::ContainerContext(m_cxt, m_writer);
   ^
/build/src/sysflowprocessor.cpp:33:4: warning: assigning newly created 'gsl::owner<>' to non-owner 'file::FileContext *' [cppcoreguidelines-owning-memory]
   m_fileCxt = new file::FileContext(m_containerCxt, m_writer);
   ^
/build/src/sysflowprocessor.cpp:34:4: warning: assigning newly created 'gsl::owner<>' to non-owner 'process::ProcessContext *' [cppcoreguidelines-owning-memory]
   m_processCxt = new process::ProcessContext(m_cxt, m_containerCxt, m_fileCxt, m_writer);
   ^
/build/src/sysflowprocessor.cpp:35:4: warning: assigning newly created 'gsl::owner<>' to non-owner 'dataflow::DataFlowProcessor *' [cppcoreguidelines-owning-memory]
   m_dfPrcr = new dataflow::DataFlowProcessor(m_cxt, m_writer, m_processCxt, m_fileCxt);
   ^
/build/src/sysflowprocessor.cpp:36:4: warning: assigning newly created 'gsl::owner<>' to non-owner 'processevent::ProcessEventProcessor *' [cppcoreguidelines-owning-memory]
   m_procEvtPrcr = new processevent::ProcessEventProcessor(m_writer, m_processCxt, m_dfPrcr);
   ^
/build/src/sysflowprocessor.cpp:55:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
bool SysFlowProcessor::checkAndRotateFile()  {
~~~~                   ^
auto                                        -> bool
/build/src/sysflowprocessor.cpp:57:28: warning: use nullptr [modernize-use-nullptr]
     time_t curTime = time(NULL);
                           ^~~~
                           nullptr
/build/src/sysflowprocessor.cpp:59:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
         SF_INFO(m_logger, "Container Table: " << m_containerCxt->getSize() <<  " Process Table: " << m_processCxt->getSize() << " NetworkFlow Table: " << m_dfPrcr->getSize() << " Num Records Written: " << m_writer->getNumRecs());
         ^
/build/src/logger.h:73:35: note: expanded from macro 'SF_INFO'
#define SF_INFO(logger, message)  LOG4CXX_INFO(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1805:86: note: expanded from macro 'LOG4CXX_INFO'
           logger->forcedLog(::log4cxx::Level::getInfo(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                     ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/sysflowprocessor.cpp:67:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int SysFlowProcessor::run() {
~~~                   ^
auto                        -> int
/build/src/sysflowprocessor.cpp:69:18: warning: use nullptr [modernize-use-nullptr]
        sinsp_evt* ev = NULL;
                        ^~~~
                        nullptr
/build/src/sysflowprocessor.cpp:84:36: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
                                if(numExpired) {
                                   ^
                                              != 0
/build/src/sysflowprocessor.cpp:85:37: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                                    SF_INFO(m_logger, "Data Flow Records exported: " << numExpired );
                                    ^
/build/src/logger.h:73:35: note: expanded from macro 'SF_INFO'
#define SF_INFO(logger, message)  LOG4CXX_INFO(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1805:86: note: expanded from macro 'LOG4CXX_INFO'
           logger->forcedLog(::log4cxx::Level::getInfo(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                     ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/sysflowprocessor.cpp:90:4: warning: do not use 'else' after 'continue' [readability-else-after-return]
                        else if(res == SCAP_EOF)
                        ^~~~~
/build/src/sysflowprocessor.cpp:96:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                                SF_ERROR(m_logger, "SCAP processor failed with res = " << res << " and error: " << m_cxt->getInspector()->getlasterr() );
                                ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/sysflowprocessor.cpp:97:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                                throw sinsp_exception(m_cxt->getInspector()->getlasterr().c_str());
                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/sysflowprocessor.cpp:97:27: warning: redundant call to 'c_str' [readability-redundant-string-cstr]
                                throw sinsp_exception(m_cxt->getInspector()->getlasterr().c_str());
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                      m_cxt->getInspector()->getlasterr()
/build/src/sysflowprocessor.cpp:104:28: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
                        if(numExpired) {
                           ^
                                      != 0
/build/src/sysflowprocessor.cpp:105:29: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                            SF_INFO(m_logger, "Data Flow Records exported: " << numExpired );
                            ^
/build/src/logger.h:73:35: note: expanded from macro 'SF_INFO'
#define SF_INFO(logger, message)  LOG4CXX_INFO(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1805:86: note: expanded from macro 'LOG4CXX_INFO'
           logger->forcedLog(::log4cxx::Level::getInfo(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                     ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/sysflowprocessor.cpp:135:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                SF_INFO(m_logger, "Exiting scap loop... shutting down" );
                ^
/build/src/logger.h:73:35: note: expanded from macro 'SF_INFO'
#define SF_INFO(logger, message)  LOG4CXX_INFO(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1805:86: note: expanded from macro 'LOG4CXX_INFO'
           logger->forcedLog(::log4cxx::Level::getInfo(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                     ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/sysflowprocessor.cpp:136:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                SF_INFO(m_logger, "Container Table: " << m_containerCxt->getSize() << " Process Table: " << m_processCxt->getSize() << " NetworkFlow Table: " << m_dfPrcr->getSize() << " Num Records Written: " << m_writer->getNumRecs() );
                ^
/build/src/logger.h:73:35: note: expanded from macro 'SF_INFO'
#define SF_INFO(logger, message)  LOG4CXX_INFO(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1805:86: note: expanded from macro 'LOG4CXX_INFO'
           logger->forcedLog(::log4cxx::Level::getInfo(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                     ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/sysflowprocessor.cpp:140:6: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            SF_ERROR(m_logger, "Sysdig exception " << e.what());
            ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/sysflowprocessor.cpp:143:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
            SF_ERROR(m_logger, "Avro Exception! Error: " << ex.what());
            ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/sysflowwriter.cpp:22:1: warning: constructor does not initialize these fields: m_numRecs [hicpp-member-init]
SysFlowWriter::SysFlowWriter(SysFlowContext* cxt, time_t start) : m_dfw(NULL), m_start(start) {
^
/build/src/sysflowwriter.cpp:22:73: warning: use nullptr [modernize-use-nullptr]
SysFlowWriter::SysFlowWriter(SysFlowContext* cxt, time_t start) : m_dfw(NULL), m_start(start) {
                                                                        ^~~~
                                                                        nullptr
/build/src/sysflowwriter.cpp:30:16: warning: use nullptr [modernize-use-nullptr]
   if(m_dfw != NULL) {
               ^~~~
               nullptr
/build/src/sysflowwriter.cpp:38:21: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   header.version = 1000;
                    ^
/build/src/sysflowwriter.cpp:49:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int SysFlowWriter::initialize() {
~~~                ^
auto                            -> int
/build/src/sysflowwriter.cpp:50:27: warning: use nullptr [modernize-use-nullptr]
    time_t curTime = time(NULL);
                          ^~~~
                          nullptr
/build/src/sysflowwriter.cpp:52:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'avro::DataFileWriter<SysFlow> *' [cppcoreguidelines-owning-memory]
    m_dfw = new avro::DataFileWriter<SysFlow>(ofile.c_str(), m_sysfSchema, COMPRESS_BLOCK_SIZE, avro::Codec::DEFLATE_CODEC); 
    ^
/build/src/sysflowwriter.cpp:57:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
string SysFlowWriter::getFileName(time_t curTime) {
~~~~~~                ^
auto                                              -> string
/build/src/sysflowwriter.cpp:80:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'avro::DataFileWriter<SysFlow> *' [cppcoreguidelines-owning-memory]
    m_dfw = new avro::DataFileWriter<SysFlow>(ofile.c_str(), m_sysfSchema, COMPRESS_BLOCK_SIZE, avro::Codec::DEFLATE_CODEC); 
    ^
/build/src/utils.cpp:21:1: warning: #includes are not sorted properly [llvm-include-order]
#include "sysflowcontext.h"
^        ~~~~~~~~~~~~~~~~~~
         "datatypes.h"
/build/src/utils.cpp:25:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
static NFKey s_nfdelkey;
^
/build/src/utils.cpp:26:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
static NFKey s_nfemptykey;
^
/build/src/utils.cpp:29:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
static OID s_oiddelkey;
^
/build/src/utils.cpp:29:12: warning: initialization of 's_oiddelkey' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
static OID s_oiddelkey;
           ^
../modules/sysflow/c++/sysflow/sysflow.hh:75:5: note: possibly throwing constructor declared here
    OID() :
    ^
/build/src/utils.cpp:30:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
static OID s_oidemptykey;
^
/build/src/utils.cpp:30:12: warning: initialization of 's_oidemptykey' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
static OID s_oidemptykey;
           ^
../modules/sysflow/c++/sysflow/sysflow.hh:75:5: note: possibly throwing constructor declared here
    OID() :
    ^
/build/src/utils.cpp:31:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace utils;
^
/build/src/utils.cpp:34:1: warning: initialization of 'm_logger' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
CREATE_LOGGER_2("sysflow.utils");
^
/build/src/logger.h:34:43: note: expanded from macro 'CREATE_LOGGER_2'
#define CREATE_LOGGER_2(logger) LoggerPtr m_logger(Logger::getLogger(logger));
                                          ^
/usr/include/log4cxx/logger.h:685:26: note: possibly throwing function declared here
        static LoggerPtr getLogger(const char* const name);
                         ^
/build/src/utils.cpp:53:34: warning: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
void  utils::generateFOID(string key, FOID* foid) {
                                 ^
                          const &
/build/src/utils.cpp:54:10: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
    SHA1((const unsigned char*)key.c_str(), key.size(), foid->begin());
         ^~~~~~~~~~~~~~~~~~~~~~
         reinterpret_cast<const unsigned char*>( )
/build/src/utils.cpp:54:10: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/utils.cpp:57:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
NFKey* utils::getNFEmptyKey() {
~~~~~~        ^
auto                          -> NFKey*
/build/src/utils.cpp:64:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
NFKey* utils::getNFDelKey() {
~~~~~~        ^
auto                        -> NFKey*
/build/src/utils.cpp:71:13: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
OID* utils::getOIDEmptyKey() {
~~~~        ^
auto                         -> OID*
/build/src/utils.cpp:78:13: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
OID* utils::getOIDDelKey() {
~~~~        ^
auto                       -> OID*
/build/src/utils.cpp:85:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
string utils::getUserName(SysFlowContext* cxt, uint32_t uid)
~~~~~~        ^
auto                                                         -> string
/build/src/utils.cpp:101:15: warning: use nullptr [modernize-use-nullptr]
   if(user != NULL) {
              ^~~~
              nullptr
/build/src/utils.cpp:102:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
       return user->name;
              ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/utils.cpp:102:15: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       return user->name;
              ^
/build/src/utils.cpp:103:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
/build/src/utils.cpp:104:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
      return string("");
             ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/utils.cpp:110:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
string utils::getGroupName(SysFlowContext* cxt, uint32_t gid)
~~~~~~        ^
auto                                                          -> string
/build/src/utils.cpp:113:15: warning: 0xffffffff is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
    if(gid == 0xffffffff)
              ^
/build/src/utils.cpp:115:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        return string("");
               ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/utils.cpp:121:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        return string("");
               ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/utils.cpp:124:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    return it->second->name;
           ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/utils.cpp:124:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    return it->second->name;
           ^
/build/src/utils.cpp:126:13: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
bool utils::isInContainer(sinsp_evt* ev) {
~~~~        ^
auto                                     -> bool
/build/src/utils.cpp:127:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    sinsp_threadinfo* ti = ev->get_thread_info();
                           ^
../modules/sysdig/build/include/userspace/libsinsp/event.h:232:36: note: default parameter was declared here
        sinsp_threadinfo* get_thread_info(bool query_os_if_not_found = false);
                                          ^
/build/src/utils.cpp:132:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
time_t utils::getExportTime(SysFlowContext* cxt) {
~~~~~~        ^
auto                                             -> time_t
/build/src/utils.cpp:140:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int64_t utils::getSyscallResult(sinsp_evt* ev) {
~~~~~~~        ^
auto                                           -> int64_t
/build/src/utils.cpp:151:10: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
                res = *(int64_t *)p->m_val;
                       ^~~~~~~~~~~
                       reinterpret_cast<int64_t *>( )
/build/src/utils.cpp:151:10: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/utils.cpp:154:16: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
               SF_WARN(m_logger, "Syscall result not of type pid!! Type: " << param->type <<  " Name: " << param->name);
               ^
/build/src/logger.h:72:35: note: expanded from macro 'SF_WARN'
#define SF_WARN(logger, message)  LOG4CXX_WARN(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1816:86: note: expanded from macro 'LOG4CXX_WARN'
           logger->forcedLog(::log4cxx::Level::getWarn(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                     ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/utils.cpp:154:108: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
               SF_WARN(m_logger, "Syscall result not of type pid!! Type: " << param->type <<  " Name: " << param->name);
                                                                                                           ^
/build/src/utils.cpp:172:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
avro::ValidSchema utils::loadSchema(const char* filename)
~~~~~~~~~~~~~~~~~        ^
auto                                                      -> avro::ValidSchema
/build/src/utils.cpp:176:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        std::ifstream ifs(filename);
                      ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/fstream:513:39: note: default parameter was declared here
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
                                      ^
/build/src/utils.cpp:179:8: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
       SF_ERROR(m_logger, "Unable to load schema file from " << filename << " Error: " << ex.what());
       ^
/build/src/logger.h:74:35: note: expanded from macro 'SF_ERROR'
#define SF_ERROR(logger, message) LOG4CXX_ERROR(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1827:87: note: expanded from macro 'LOG4CXX_ERROR'
           logger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/utils.cpp:185:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
string  utils::getPath(sinsp_evt* ev, string paraName) {
~~~~~~         ^
auto                                                   -> string
/build/src/utils.cpp:185:46: warning: the parameter 'paraName' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
string  utils::getPath(sinsp_evt* ev, string paraName) {
                                             ^
                                      const &
/build/src/utils.cpp:191:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        string name = ev->get_param_name(i);
                      ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/utils.cpp:192:12: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
        if(paraName.compare(name) != 0) {
           ^~~~~~~~~~~~~~~~~~~~~~    ~
           paraName                  name
/build/src/utils.cpp:197:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
            path = string(p->m_val, p->m_len);
                   ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:500:6: note: default parameter was declared here
                   const _Alloc& __a = _Alloc())
                   ^
/build/src/utils.cpp:205:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int64_t utils::getFD(sinsp_evt* ev, string paraName) {
~~~~~~~        ^
auto                                                 -> int64_t
/build/src/utils.cpp:205:44: warning: the parameter 'paraName' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
int64_t utils::getFD(sinsp_evt* ev, string paraName) {
                                           ^
                                    const &
/build/src/utils.cpp:210:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        string name = ev->get_param_name(i);
                      ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:509:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/build/src/utils.cpp:211:12: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
        if(paraName.compare(name) != 0) {
           ^~~~~~~~~~~~~~~~~~~~~~    ~
           paraName                  name
/build/src/utils.cpp:216:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            assert(p->m_len == sizeof(int64_t));
            ^
/usr/include/assert.h:91:48: note: expanded from macro 'assert'
   : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                               ^
/usr/include/assert.h:106:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __PRETTY_FUNCTION__
                                ^
/build/src/utils.cpp:217:19: warning: redundant cast to the same type [google-readability-casting]
            fd = ((int64_t)*(int64_t*)p->m_val);
                  ^~~~~~~~~
/build/src/utils.cpp:217:29: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
            fd = ((int64_t)*(int64_t*)p->m_val);
                            ^~~~~~~~~~
                            reinterpret_cast<int64_t*>( )
/build/src/utils.cpp:217:29: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/build/src/utils.cpp:226:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
string utils::getAbsolutePath(sinsp_threadinfo* ti, int64_t dirfd, string fileName) {
~~~~~~        ^
auto                                                                                -> string
/build/src/utils.cpp:226:75: warning: the parameter 'fileName' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
string utils::getAbsolutePath(sinsp_threadinfo* ti, int64_t dirfd, string fileName) {
                                                                          ^
                                                                   const &
/build/src/utils.cpp:227:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    fs::path p(fileName);
             ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/fs_path.h:180:37: note: default parameter was declared here
      path(_Source const& __source, format = auto_format)
                                    ^
/build/src/utils.cpp:228:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    SF_DEBUG(m_logger, "getAbsolutePath: The path is " << p << " File name " << fileName <<  " is relative? " << p.is_relative());
    ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/utils.cpp:240:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            assert(fdinfo != NULL);
            ^
/usr/include/assert.h:91:48: note: expanded from macro 'assert'
   : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                               ^
/usr/include/assert.h:106:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __PRETTY_FUNCTION__
                                ^
/build/src/utils.cpp:240:30: warning: use nullptr [modernize-use-nullptr]
            assert(fdinfo != NULL);
                             ^~~~
                             nullptr
/build/src/utils.cpp:242:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            SF_DEBUG(m_logger, "getAbsolutePath: Retrieve fdinfo for fd. Path:  " << tmp);                
            ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/utils.cpp:245:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        SF_DEBUG(m_logger, "getAbsolutePath: Before canonicalization: " << tmp);
        ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/utils.cpp:247:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        SF_DEBUG(m_logger, "getAbsolutePath: The canonicalized file is " << p);               
        ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/utils.cpp:255:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
string utils::getAbsolutePath(sinsp_threadinfo* ti, string fileName) {
~~~~~~        ^
auto                                                                 -> string
/build/src/utils.cpp:255:60: warning: the parameter 'fileName' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
string utils::getAbsolutePath(sinsp_threadinfo* ti, string fileName) {
                                                           ^
                                                    const &
/build/src/utils.cpp:256:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    fs::path p(fileName);
             ^
/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/fs_path.h:180:37: note: default parameter was declared here
      path(_Source const& __source, format = auto_format)
                                    ^
/build/src/utils.cpp:257:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    SF_DEBUG(m_logger, "getAbsolutePath: The path is " << p << " File name " << fileName <<  " is relative? " << p.is_relative());
    ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/utils.cpp:264:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
            SF_DEBUG(m_logger, "getAbsolutePath: Before canonicalization: " << tmp);
            ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
/build/src/utils.cpp:266:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
            SF_DEBUG(m_logger, "getAbsolutePath: The canonicalized file is " << p);               
            ^
/build/src/logger.h:71:35: note: expanded from macro 'SF_DEBUG'
#define SF_DEBUG(logger, message) LOG4CXX_DEBUG(logger, message)
                                  ^
/usr/include/log4cxx/logger.h:1782:87: note: expanded from macro 'LOG4CXX_DEBUG'
           logger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
                                                                                      ^
/usr/include/log4cxx/spi/location/locationinfo.h:132:12: note: expanded from macro 'LOG4CXX_LOCATION'
           __LOG4CXX_FUNC__,                                                         \
           ^
/usr/include/log4cxx/spi/location/locationinfo.h:125:32: note: expanded from macro '__LOG4CXX_FUNC__'
      #define __LOG4CXX_FUNC__ __PRETTY_FUNCTION__
                               ^
